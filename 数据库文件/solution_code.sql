/*
 Navicat Premium Dump SQL

 Source Server         : test
 Source Server Type    : MySQL
 Source Server Version : 80039 (8.0.39)
 Source Host           : localhost:3306
 Source Schema         : AIreview

 Target Server Type    : MySQL
 Target Server Version : 80039 (8.0.39)
 File Encoding         : 65001

 Date: 04/04/2025 17:15:07
*/

SET NAMES utf8mb4;
SET FOREIGN_KEY_CHECKS = 0;

-- ----------------------------
-- Table structure for solution_code
-- ----------------------------
DROP TABLE IF EXISTS `solution_code`;
CREATE TABLE `solution_code` (
  `id` int NOT NULL AUTO_INCREMENT,
  `solution_id` int NOT NULL COMMENT '主方案ID',
  `language_id` int NOT NULL COMMENT '编程语言ID',
  `standard_solution` text CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NOT NULL COMMENT '具体语言实现',
  `version` varchar(20) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci DEFAULT '1.0' COMMENT '代码版本',
  `created_at` timestamp NULL DEFAULT CURRENT_TIMESTAMP,
  `updated_at` timestamp NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  PRIMARY KEY (`id`),
  UNIQUE KEY `uniq_solution_lang` (`solution_id`,`language_id`),
  KEY `fk_code_language` (`language_id`),
  CONSTRAINT `fk_code_language` FOREIGN KEY (`language_id`) REFERENCES `solution_languages` (`id`),
  CONSTRAINT `fk_code_main` FOREIGN KEY (`solution_id`) REFERENCES `solution_main` (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=144 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- ----------------------------
-- Records of solution_code
-- ----------------------------
BEGIN;
INSERT INTO `solution_code` (`id`, `solution_id`, `language_id`, `standard_solution`, `version`, `created_at`, `updated_at`) VALUES (1, 1, 1, '#include <stdio.h>\n\nint main() {\n    int a, b;\n    scanf(\"%d %d\", &a, &b);\n    printf(\"%d\\n\", a + b);\n    return 0;\n}', '1.0', '2025-02-09 20:35:22', '2025-02-09 20:35:22');
INSERT INTO `solution_code` (`id`, `solution_id`, `language_id`, `standard_solution`, `version`, `created_at`, `updated_at`) VALUES (2, 2, 1, '#include <stdio.h>\n\nint main() {\n    int n;\n    scanf(\"%d\", &n);\n    int arr[100], max;\n    for(int i = 0; i < n; i++) {\n        scanf(\"%d\", &arr[i]);\n    }\n    max = arr[0];\n    for(int i = 1; i < n; i++) {\n        if(arr[i] > max) max = arr[i];\n    }\n    printf(\"%d\\n\", max);\n    return 0;\n}', '1.0', '2025-02-09 20:35:22', '2025-02-09 20:35:22');
INSERT INTO `solution_code` (`id`, `solution_id`, `language_id`, `standard_solution`, `version`, `created_at`, `updated_at`) VALUES (3, 3, 1, '#include <stdio.h>\n#include <string.h>\n\nint main() {\n    char str[100];\n    scanf(\"%s\", str);\n    int len = strlen(str);\n    for(int i = len-1; i >= 0; i--) {\n        printf(\"%c\", str[i]);\n    }\n    printf(\"\\n\");\n    return 0;\n}', '1.0', '2025-02-09 20:35:22', '2025-02-09 20:35:22');
INSERT INTO `solution_code` (`id`, `solution_id`, `language_id`, `standard_solution`, `version`, `created_at`, `updated_at`) VALUES (4, 4, 1, '#include <stdio.h>\n\nint main() {\n    int n;\n    scanf(\"%d\", &n);\n    long long result = 1;\n    for(int i = 1; i <= n; i++) {\n        result *= i;\n    }\n    printf(\"%lld\\n\", result);\n    return 0;\n}', '1.0', '2025-02-09 20:35:22', '2025-02-09 20:35:22');
INSERT INTO `solution_code` (`id`, `solution_id`, `language_id`, `standard_solution`, `version`, `created_at`, `updated_at`) VALUES (5, 5, 1, '#include <stdio.h>\n\nint isPrime(int n) {\n    if(n <= 1) return 0;\n    for(int i = 2; i * i <= n; i++) {\n        if(n % i == 0) return 0;\n    }\n    return 1;\n}\n\nint main() {\n    int n;\n    scanf(\"%d\", &n);\n    printf(\"%s\\n\", isPrime(n) ? \"是\" : \"否\");\n    return 0;\n}', '1.0', '2025-02-09 20:35:22', '2025-02-09 20:35:22');
INSERT INTO `solution_code` (`id`, `solution_id`, `language_id`, `standard_solution`, `version`, `created_at`, `updated_at`) VALUES (6, 6, 1, '#include <stdio.h>\n\nint main() {\n    int a, b;\n    scanf(\"%d %d\", &a, &b);\n    printf(\"%d\\n\", a - b);\n    return 0;\n}', '1.0', '2025-02-09 20:35:22', '2025-02-09 20:35:22');
INSERT INTO `solution_code` (`id`, `solution_id`, `language_id`, `standard_solution`, `version`, `created_at`, `updated_at`) VALUES (7, 7, 1, '#include <stdio.h>\n\nint main() {\n    int n;\n    scanf(\"%d\", &n);\n    int arr[100], min;\n    for(int i = 0; i < n; i++) {\n        scanf(\"%d\", &arr[i]);\n    }\n    min = arr[0];\n    for(int i = 1; i < n; i++) {\n        if(arr[i] < min) min = arr[i];\n    }\n    printf(\"%d\\n\", min);\n    return 0;\n}', '1.0', '2025-02-09 20:35:22', '2025-02-09 20:35:22');
INSERT INTO `solution_code` (`id`, `solution_id`, `language_id`, `standard_solution`, `version`, `created_at`, `updated_at`) VALUES (8, 8, 1, '#include <stdio.h>\n#include <string.h>\n\nint main() {\n    char str1[100], str2[100];\n    scanf(\"%s %s\", str1, str2);\n    printf(\"%s%s\\n\", str1, str2);\n    return 0;\n}', '1.0', '2025-02-09 20:35:22', '2025-02-09 20:35:22');
INSERT INTO `solution_code` (`id`, `solution_id`, `language_id`, `standard_solution`, `version`, `created_at`, `updated_at`) VALUES (9, 9, 1, '#include <stdio.h>\n\nint fib(int n) {\n    if(n <= 1) return n;\n    int a = 0, b = 1, c;\n    for(int i = 2; i <= n; i++) {\n        c = a + b;\n        a = b;\n        b = c;\n    }\n    return b;\n}\n\nint main() {\n    int n;\n    scanf(\"%d\", &n);\n    printf(\"%d\\n\", fib(n));\n    return 0;\n}', '1.0', '2025-02-09 20:35:22', '2025-02-09 20:35:22');
INSERT INTO `solution_code` (`id`, `solution_id`, `language_id`, `standard_solution`, `version`, `created_at`, `updated_at`) VALUES (10, 10, 1, '#include <stdio.h>\n\nint main() {\n    int n;\n    scanf(\"%d\", &n);\n    printf(\"%s\\n\", n % 2 == 0 ? \"是\" : \"否\");\n    return 0;\n}', '1.0', '2025-02-09 20:35:22', '2025-02-09 20:35:22');
INSERT INTO `solution_code` (`id`, `solution_id`, `language_id`, `standard_solution`, `version`, `created_at`, `updated_at`) VALUES (11, 11, 1, '#include <stdio.h>\n\nvoid bubbleSort(int arr[], int n) {\n    for(int i = 0; i < n-1; i++) {\n        for(int j = 0; j < n-i-1; j++) {\n            if(arr[j] > arr[j+1]) {\n                int temp = arr[j];\n                arr[j] = arr[j+1];\n                arr[j+1] = temp;\n            }\n        }\n    }\n}\n\nint main() {\n    int n;\n    scanf(\"%d\", &n);\n    int arr[100];\n    for(int i = 0; i < n; i++) {\n        scanf(\"%d\", &arr[i]);\n    }\n    bubbleSort(arr, n);\n    for(int i = 0; i < n; i++) {\n        printf(\"%d \", arr[i]);\n    }\n    printf(\"\\n\");\n    return 0;\n}', '1.0', '2025-02-09 20:35:22', '2025-02-09 20:35:22');
INSERT INTO `solution_code` (`id`, `solution_id`, `language_id`, `standard_solution`, `version`, `created_at`, `updated_at`) VALUES (12, 12, 1, '#include <stdio.h>\n#include <string.h>\n\nint main() {\n    char str[100], ch;\n    scanf(\"%s %c\", str, &ch);\n    int count = 0;\n    for(int i = 0; str[i]; i++) {\n        if(str[i] == ch) count++;\n    }\n    printf(\"%d\\n\", count);\n    return 0;\n}', '1.0', '2025-02-09 20:35:22', '2025-02-09 20:35:22');
INSERT INTO `solution_code` (`id`, `solution_id`, `language_id`, `standard_solution`, `version`, `created_at`, `updated_at`) VALUES (13, 13, 1, '#include <stdio.h>\n#include <string.h>\n\nint main() {\n    char str[1000];\n    gets(str);\n    char *token = strtok(str, \" \");\n    printf(\"%s\", token);\n    token = strtok(NULL, \" \");\n    while(token != NULL) {\n        if(strcmp(token, \"world\") != 0) {\n            printf(\" %s\", token);\n        }\n        token = strtok(NULL, \" \");\n    }\n    printf(\"\\n\");\n    return 0;\n}', '1.0', '2025-02-09 20:35:22', '2025-02-09 20:35:22');
INSERT INTO `solution_code` (`id`, `solution_id`, `language_id`, `standard_solution`, `version`, `created_at`, `updated_at`) VALUES (14, 14, 1, '#include <stdio.h>\n\nint gcd(int a, int b) {\n    return b == 0 ? a : gcd(b, a % b);\n}\n\nint main() {\n    int a, b;\n    scanf(\"%d %d\", &a, &b);\n    printf(\"%d\\n\", gcd(a, b));\n    return 0;\n}', '1.0', '2025-02-09 20:35:22', '2025-02-09 20:35:22');
INSERT INTO `solution_code` (`id`, `solution_id`, `language_id`, `standard_solution`, `version`, `created_at`, `updated_at`) VALUES (15, 15, 1, '#include <stdio.h>\n\nint isPalindrome(int n) {\n    int reversed = 0, original = n;\n    while(n > 0) {\n        reversed = reversed * 10 + n % 10;\n        n /= 10;\n    }\n    return original == reversed;\n}\n\nint main() {\n    int n;\n    scanf(\"%d\", &n);\n    printf(\"%s\\n\", isPalindrome(n) ? \"是\" : \"否\");\n    return 0;\n}', '1.0', '2025-02-09 20:35:22', '2025-02-09 20:35:22');
INSERT INTO `solution_code` (`id`, `solution_id`, `language_id`, `standard_solution`, `version`, `created_at`, `updated_at`) VALUES (16, 16, 1, '#include <stdio.h>\n\nint main() {\n    int n, m;\n    scanf(\"%d %d\", &n, &m);\n    int mat1[10][10], mat2[10][10];\n    \n    for(int i = 0; i < n; i++)\n        for(int j = 0; j < m; j++)\n            scanf(\"%d\", &mat1[i][j]);\n            \n    for(int i = 0; i < n; i++)\n        for(int j = 0; j < m; j++)\n            scanf(\"%d\", &mat2[i][j]);\n            \n    for(int i = 0; i < n; i++) {\n        for(int j = 0; j < m; j++)\n            printf(\"%d \", mat1[i][j] + mat2[i][j]);\n        printf(\"\\n\");\n    }\n    return 0;\n}', '1.0', '2025-02-09 20:35:22', '2025-02-09 20:35:22');
INSERT INTO `solution_code` (`id`, `solution_id`, `language_id`, `standard_solution`, `version`, `created_at`, `updated_at`) VALUES (17, 17, 1, '#include <stdio.h>\n#include <string.h>\n\nvoid reverseWords(char *s) {\n    char words[100][100];\n    int wordCount = 0;\n    char *token = strtok(s, \" \");\n    while(token != NULL) {\n        strcpy(words[wordCount++], token);\n        token = strtok(NULL, \" \");\n    }\n    for(int i = wordCount-1; i >= 0; i--) {\n        printf(\"%s\", words[i]);\n        if(i > 0) printf(\" \");\n    }\n    printf(\"\\n\");\n}\n\nint main() {\n    char s[1000];\n    gets(s);\n    reverseWords(s);\n    return 0;\n}', '1.0', '2025-02-09 20:35:22', '2025-02-09 20:35:22');
INSERT INTO `solution_code` (`id`, `solution_id`, `language_id`, `standard_solution`, `version`, `created_at`, `updated_at`) VALUES (18, 18, 1, '#include <stdio.h>\n\nint main() {\n    int n;\n    scanf(\"%d\", &n);\n    int triangle[30][30] = {0};\n    \n    for(int i = 0; i < n; i++) {\n        triangle[i][0] = 1;\n        for(int j = 1; j <= i; j++) {\n            triangle[i][j] = triangle[i-1][j-1] + triangle[i-1][j];\n        }\n    }\n    \n    for(int i = 0; i < n; i++) {\n        for(int j = 0; j <= i; j++) {\n            printf(\"%d \", triangle[i][j]);\n        }\n        printf(\"\\n\");\n    }\n    return 0;\n}', '1.0', '2025-02-09 20:35:22', '2025-02-09 20:35:22');
INSERT INTO `solution_code` (`id`, `solution_id`, `language_id`, `standard_solution`, `version`, `created_at`, `updated_at`) VALUES (19, 19, 1, '#include <stdio.h>\n\nint isPrime(int n) {\n    if(n <= 1) return 0;\n    for(int i = 2; i * i <= n; i++)\n        if(n % i == 0) return 0;\n    return 1;\n}\n\nint main() {\n    int start, end;\n    scanf(\"%d %d\", &start, &end);\n    int first = 1;\n    for(int i = start; i <= end; i++) {\n        if(isPrime(i)) {\n            if(!first) printf(\" \");\n            printf(\"%d\", i);\n            first = 0;\n        }\n    }\n    printf(\"\\n\");\n    return 0;\n}', '1.0', '2025-02-09 20:35:22', '2025-02-09 20:35:22');
INSERT INTO `solution_code` (`id`, `solution_id`, `language_id`, `standard_solution`, `version`, `created_at`, `updated_at`) VALUES (20, 20, 1, '#include <stdio.h>\n\nint main() {\n    int n;\n    scanf(\"%d\", &n);\n    int arr[100], unique[100], uniqueCount = 0;\n    for(int i = 0; i < n; i++) {\n        scanf(\"%d\", &arr[i]);\n        int isUnique = 1;\n        for(int j = 0; j < uniqueCount; j++) {\n            if(arr[i] == unique[j]) {\n                isUnique = 0;\n                break;\n            }\n        }\n        if(isUnique) unique[uniqueCount++] = arr[i];\n    }\n    for(int i = 0; i < uniqueCount; i++) {\n        printf(\"%d \", unique[i]);\n    }\n    printf(\"\\n\");\n    return 0;\n}', '1.0', '2025-02-09 20:35:22', '2025-02-09 20:35:22');
INSERT INTO `solution_code` (`id`, `solution_id`, `language_id`, `standard_solution`, `version`, `created_at`, `updated_at`) VALUES (21, 21, 1, '#include <stdio.h>\n\nint main() {\n    int n;\n    scanf(\"%d\", &n);\n    int arr[100], sum = 0;\n    for(int i = 0; i < n; i++) {\n        scanf(\"%d\", &arr[i]);\n        sum += arr[i];\n    }\n    printf(\"%d\\n\", sum);\n    return 0;\n}', '1.0', '2025-02-09 20:35:22', '2025-02-09 20:35:22');
INSERT INTO `solution_code` (`id`, `solution_id`, `language_id`, `standard_solution`, `version`, `created_at`, `updated_at`) VALUES (22, 22, 1, '#include <stdio.h>\n#include <string.h>\n\nint main() {\n    char str[100];\n    scanf(\"%s\", str);\n    int len = strlen(str);\n    for(int i = len-1; i >= 0; i--) {\n        printf(\"%c\", str[i]);\n    }\n    printf(\"\\n\");\n    return 0;\n}', '1.0', '2025-02-09 20:35:22', '2025-02-09 20:35:22');
INSERT INTO `solution_code` (`id`, `solution_id`, `language_id`, `standard_solution`, `version`, `created_at`, `updated_at`) VALUES (23, 23, 1, '#include <stdio.h>\n\nint fibonacci(int n) {\n    if(n <= 1) return n;\n    int a = 0, b = 1, c;\n    for(int i = 2; i <= n; i++) {\n        c = a + b;\n        a = b;\n        b = c;\n    }\n    return b;\n}\n\nint main() {\n    int n;\n    scanf(\"%d\", &n);\n    printf(\"%d\\n\", fibonacci(n));\n    return 0;\n}', '1.0', '2025-02-09 20:35:22', '2025-02-09 20:35:22');
INSERT INTO `solution_code` (`id`, `solution_id`, `language_id`, `standard_solution`, `version`, `created_at`, `updated_at`) VALUES (25, 25, 1, '#include <stdio.h>\n\nint main() {\n    int n;\n    scanf(\"%d\", &n);\n    printf(\"%s\\n\", (n % 2 == 0) ? \"是\" : \"否\");\n    return 0;\n}', '1.0', '2025-02-09 20:35:22', '2025-02-09 20:35:22');
INSERT INTO `solution_code` (`id`, `solution_id`, `language_id`, `standard_solution`, `version`, `created_at`, `updated_at`) VALUES (29, 29, 1, '#include <stdio.h>\n#include <string.h>\n\nint main() {\n    char binary[33];\n    scanf(\"%s\", binary);\n    int decimal = 0;\n    int len = strlen(binary);\n    for(int i = 0; i < len; i++) {\n        decimal = decimal * 2 + (binary[i] - \'0\');\n    }\n    printf(\"%d\\n\", decimal);\n    return 0;\n}', '1.0', '2025-02-09 20:35:22', '2025-02-09 20:35:22');
INSERT INTO `solution_code` (`id`, `solution_id`, `language_id`, `standard_solution`, `version`, `created_at`, `updated_at`) VALUES (38, 1, 2, 'a, b = map(int, input().split())\nprint(a + b)', '1.0', '2025-02-09 21:00:38', '2025-02-09 21:00:38');
INSERT INTO `solution_code` (`id`, `solution_id`, `language_id`, `standard_solution`, `version`, `created_at`, `updated_at`) VALUES (39, 1, 3, '#include <stdio.h>\n\nint main() {\n    int a, b;\n    scanf(\"%d %d\", &a, &b);\n    printf(\"%d\\n\", a + b);\n    return 0;\n}\njava', '1.0', '2025-02-09 21:00:38', '2025-04-03 00:05:29');
INSERT INTO `solution_code` (`id`, `solution_id`, `language_id`, `standard_solution`, `version`, `created_at`, `updated_at`) VALUES (40, 1, 4, '#include <iostream>\nusing namespace std;\n\nint main() {\n    int a, b;\n    cin >> a >> b;\n    cout << a + b << endl;\n    return 0;\n}', '1.0', '2025-02-09 21:00:38', '2025-02-09 21:00:38');
INSERT INTO `solution_code` (`id`, `solution_id`, `language_id`, `standard_solution`, `version`, `created_at`, `updated_at`) VALUES (41, 2, 2, 'n = int(input())\narr = list(map(int, input().split()))\nprint(max(arr))', '1.0', '2025-02-09 21:00:38', '2025-02-09 21:00:38');
INSERT INTO `solution_code` (`id`, `solution_id`, `language_id`, `standard_solution`, `version`, `created_at`, `updated_at`) VALUES (42, 2, 3, 'import java.util.*;\n\npublic class Main {\n    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n        int n = sc.nextInt();\n        int max = Integer.MIN_VALUE;\n        while(n-- > 0) {\n            max = Math.max(max, sc.nextInt());\n        }\n        System.out.println(max);\n    }\n}', '1.0', '2025-02-09 21:00:38', '2025-02-09 21:00:38');
INSERT INTO `solution_code` (`id`, `solution_id`, `language_id`, `standard_solution`, `version`, `created_at`, `updated_at`) VALUES (43, 2, 4, '#include <iostream>\n#include <climits>\nusing namespace std;\n\nint main() {\n    int n, tmp;\n    cin >> n;\n    int max_val = INT_MIN;\n    while(n--) {\n        cin >> tmp;\n        if(tmp > max_val) max_val = tmp;\n    }\n    cout << max_val << endl;\n    return 0;\n}', '1.0', '2025-02-09 21:00:38', '2025-02-09 21:00:38');
INSERT INTO `solution_code` (`id`, `solution_id`, `language_id`, `standard_solution`, `version`, `created_at`, `updated_at`) VALUES (44, 3, 2, 's = input().strip()\nprint(s[::-1])', '1.0', '2025-02-09 21:00:38', '2025-02-09 21:00:38');
INSERT INTO `solution_code` (`id`, `solution_id`, `language_id`, `standard_solution`, `version`, `created_at`, `updated_at`) VALUES (45, 3, 3, 'import java.util.Scanner;\n\npublic class Main {\n    public static void main(String[] args) {\n        String s = new Scanner(System.in).next();\n        System.out.println(new StringBuilder(s).reverse());\n    }\n}', '1.0', '2025-02-09 21:00:38', '2025-02-09 21:00:38');
INSERT INTO `solution_code` (`id`, `solution_id`, `language_id`, `standard_solution`, `version`, `created_at`, `updated_at`) VALUES (46, 3, 4, '#include <iostream>\n#include <algorithm>\nusing namespace std;\n\nint main() {\n    string s;\n    cin >> s;\n    reverse(s.begin(), s.end());\n    cout << s << endl;\n    return 0;\n}', '1.0', '2025-02-09 21:00:38', '2025-02-09 21:00:38');
INSERT INTO `solution_code` (`id`, `solution_id`, `language_id`, `standard_solution`, `version`, `created_at`, `updated_at`) VALUES (47, 4, 2, 'n = int(input())\nfrom math import factorial\nprint(factorial(n))', '1.0', '2025-02-09 21:00:38', '2025-02-09 21:00:38');
INSERT INTO `solution_code` (`id`, `solution_id`, `language_id`, `standard_solution`, `version`, `created_at`, `updated_at`) VALUES (48, 4, 3, 'import java.math.BigInteger;\nimport java.util.Scanner;\n\npublic class Main {\n    public static void main(String[] args) {\n        int n = new Scanner(System.in).nextInt();\n        BigInteger result = BigInteger.ONE;\n        for(int i=2; i<=n; i++){\n            result = result.multiply(BigInteger.valueOf(i));\n        }\n        System.out.println(result);\n    }\n}', '1.0', '2025-02-09 21:00:38', '2025-02-09 21:00:38');
INSERT INTO `solution_code` (`id`, `solution_id`, `language_id`, `standard_solution`, `version`, `created_at`, `updated_at`) VALUES (49, 4, 4, '#include <iostream>\nusing namespace std;\n\nint main() {\n    int n;\n    cin >> n;\n    long long fact = 1;\n    for(int i=2; i<=n; ++i) fact *= i;\n    cout << fact << endl;\n    return 0;\n}', '1.0', '2025-02-09 21:00:38', '2025-02-09 21:00:38');
INSERT INTO `solution_code` (`id`, `solution_id`, `language_id`, `standard_solution`, `version`, `created_at`, `updated_at`) VALUES (50, 5, 2, 'def is_prime(n):\n    if n <= 1: return False\n    for i in range(2, int(n**0.5)+1):\n        if n%i == 0: return False\n    return True\n\nn = int(input())\nprint(\"是\" if is_prime(n) else \"否\")', '1.0', '2025-02-09 21:00:38', '2025-02-09 21:00:38');
INSERT INTO `solution_code` (`id`, `solution_id`, `language_id`, `standard_solution`, `version`, `created_at`, `updated_at`) VALUES (51, 5, 3, 'import java.util.Scanner;\n\npublic class Main {\n    public static boolean isPrime(int n) {\n        if(n <= 1) return false;\n        for(int i=2; i*i<=n; i++)\n            if(n%i == 0) return false;\n        return true;\n    }\n    \n    public static void main(String[] args) {\n        int n = new Scanner(System.in).nextInt();\n        System.out.println(isPrime(n) ? \"是\" : \"否\");\n    }\n}', '1.0', '2025-02-09 21:00:38', '2025-02-09 21:00:38');
INSERT INTO `solution_code` (`id`, `solution_id`, `language_id`, `standard_solution`, `version`, `created_at`, `updated_at`) VALUES (52, 5, 4, '#include <iostream>\n#include <cmath>\nusing namespace std;\n\nbool isPrime(int n) {\n    if(n <= 1) return false;\n    for(int i=2; i<=sqrt(n); ++i)\n        if(n%i == 0) return false;\n    return true;\n}\n\nint main() {\n    int n; cin >> n;\n    cout << (isPrime(n) ? \"是\" : \"否\") << endl;\n    return 0;\n}', '1.0', '2025-02-09 21:00:38', '2025-02-09 21:00:38');
INSERT INTO `solution_code` (`id`, `solution_id`, `language_id`, `standard_solution`, `version`, `created_at`, `updated_at`) VALUES (53, 6, 2, 'a, b = map(int, input().split())\nprint(a - b)', '1.0', '2025-02-09 21:02:47', '2025-02-09 21:02:47');
INSERT INTO `solution_code` (`id`, `solution_id`, `language_id`, `standard_solution`, `version`, `created_at`, `updated_at`) VALUES (54, 6, 3, 'import java.util.Scanner;\n\npublic class Main {\n    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n        int a = sc.nextInt();\n        int b = sc.nextInt();\n        System.out.println(a - b);\n    }\n}', '1.0', '2025-02-09 21:02:47', '2025-02-09 21:02:47');
INSERT INTO `solution_code` (`id`, `solution_id`, `language_id`, `standard_solution`, `version`, `created_at`, `updated_at`) VALUES (55, 6, 4, '#include <iostream>\nusing namespace std;\n\nint main() {\n    int a, b;\n    cin >> a >> b;\n    cout << a - b << endl;\n    return 0;\n}', '1.0', '2025-02-09 21:02:47', '2025-02-09 21:02:47');
INSERT INTO `solution_code` (`id`, `solution_id`, `language_id`, `standard_solution`, `version`, `created_at`, `updated_at`) VALUES (56, 7, 2, 'n = int(input())\narr = list(map(int, input().split()))\nprint(min(arr))', '1.0', '2025-02-09 21:02:47', '2025-02-09 21:02:47');
INSERT INTO `solution_code` (`id`, `solution_id`, `language_id`, `standard_solution`, `version`, `created_at`, `updated_at`) VALUES (57, 7, 3, 'import java.util.*;\n\npublic class Main {\n    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n        int n = sc.nextInt();\n        int min = Integer.MAX_VALUE;\n        while(n-- > 0) {\n            min = Math.min(min, sc.nextInt());\n        }\n        System.out.println(min);\n    }\n}', '1.0', '2025-02-09 21:02:47', '2025-02-09 21:02:47');
INSERT INTO `solution_code` (`id`, `solution_id`, `language_id`, `standard_solution`, `version`, `created_at`, `updated_at`) VALUES (58, 7, 4, '#include <iostream>\n#include <climits>\nusing namespace std;\n\nint main() {\n    int n, tmp;\n    cin >> n;\n    int min_val = INT_MAX;\n    while(n--) {\n        cin >> tmp;\n        if(tmp < min_val) min_val = tmp;\n    }\n    cout << min_val << endl;\n    return 0;\n}', '1.0', '2025-02-09 21:02:47', '2025-02-09 21:02:47');
INSERT INTO `solution_code` (`id`, `solution_id`, `language_id`, `standard_solution`, `version`, `created_at`, `updated_at`) VALUES (59, 8, 2, 's1, s2 = input().split()\nprint(s1 + s2)', '1.0', '2025-02-09 21:02:47', '2025-02-09 21:02:47');
INSERT INTO `solution_code` (`id`, `solution_id`, `language_id`, `standard_solution`, `version`, `created_at`, `updated_at`) VALUES (60, 8, 3, 'import java.util.Scanner;\n\npublic class Main {\n    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n        String s1 = sc.next();\n        String s2 = sc.next();\n        System.out.println(s1 + s2);\n    }\n}', '1.0', '2025-02-09 21:02:47', '2025-02-09 21:02:47');
INSERT INTO `solution_code` (`id`, `solution_id`, `language_id`, `standard_solution`, `version`, `created_at`, `updated_at`) VALUES (61, 8, 4, '#include <iostream>\n#include <string>\nusing namespace std;\n\nint main() {\n    string s1, s2;\n    cin >> s1 >> s2;\n    cout << s1 + s2 << endl;\n    return 0;\n}', '1.0', '2025-02-09 21:02:47', '2025-02-09 21:02:47');
INSERT INTO `solution_code` (`id`, `solution_id`, `language_id`, `standard_solution`, `version`, `created_at`, `updated_at`) VALUES (62, 9, 2, 'n = int(input())\na, b = 0, 1\nfor _ in range(n):\n    a, b = b, a + b\nprint(a)', '1.0', '2025-02-09 21:02:47', '2025-02-09 21:02:47');
INSERT INTO `solution_code` (`id`, `solution_id`, `language_id`, `standard_solution`, `version`, `created_at`, `updated_at`) VALUES (63, 9, 3, 'import java.util.Scanner;\n\npublic class Main {\n    public static void main(String[] args) {\n        int n = new Scanner(System.in).nextInt();\n        int a = 0, b = 1;\n        for(int i=0; i<n; i++) {\n            int c = a + b;\n            a = b;\n            b = c;\n        }\n        System.out.println(a);\n    }\n}', '1.0', '2025-02-09 21:02:47', '2025-02-09 21:02:47');
INSERT INTO `solution_code` (`id`, `solution_id`, `language_id`, `standard_solution`, `version`, `created_at`, `updated_at`) VALUES (64, 9, 4, '#include <iostream>\nusing namespace std;\n\nint main() {\n    int n;\n    cin >> n;\n    int a = 0, b = 1;\n    for(int i=0; i<n; ++i) {\n        int c = a + b;\n        a = b;\n        b = c;\n    }\n    cout << a << endl;\n    return 0;\n}', '1.0', '2025-02-09 21:02:47', '2025-02-09 21:02:47');
INSERT INTO `solution_code` (`id`, `solution_id`, `language_id`, `standard_solution`, `version`, `created_at`, `updated_at`) VALUES (65, 10, 2, 'n = int(input())\nprint(\"是\" if n % 2 == 0 else \"否\")', '1.0', '2025-02-09 21:02:47', '2025-02-09 21:02:47');
INSERT INTO `solution_code` (`id`, `solution_id`, `language_id`, `standard_solution`, `version`, `created_at`, `updated_at`) VALUES (66, 10, 3, 'import java.util.Scanner;\n\npublic class Main {\n    public static void main(String[] args) {\n        int n = new Scanner(System.in).nextInt();\n        System.out.println(n % 2 == 0 ? \"是\" : \"否\");\n    }\n}', '1.0', '2025-02-09 21:02:47', '2025-02-09 21:02:47');
INSERT INTO `solution_code` (`id`, `solution_id`, `language_id`, `standard_solution`, `version`, `created_at`, `updated_at`) VALUES (67, 10, 4, '#include <iostream>\nusing namespace std;\n\nint main() {\n    int n;\n    cin >> n;\n    cout << (n % 2 == 0 ? \"是\" : \"否\") << endl;\n    return 0;\n}', '1.0', '2025-02-09 21:02:47', '2025-02-09 21:02:47');
INSERT INTO `solution_code` (`id`, `solution_id`, `language_id`, `standard_solution`, `version`, `created_at`, `updated_at`) VALUES (68, 11, 2, 'n = int(input())\narr = list(map(int, input().split()))\nfor i in range(n-1):\n    for j in range(n-i-1):\n        if arr[j] > arr[j+1]:\n            arr[j], arr[j+1] = arr[j+1], arr[j]\nprint(\" \".join(map(str, arr)))', '1.0', '2025-02-09 21:05:55', '2025-02-09 21:05:55');
INSERT INTO `solution_code` (`id`, `solution_id`, `language_id`, `standard_solution`, `version`, `created_at`, `updated_at`) VALUES (69, 11, 3, 'import java.util.*;\n\npublic class Main {\n    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n        int n = sc.nextInt();\n        int[] arr = new int[n];\n        for(int i=0; i<n; i++) arr[i] = sc.nextInt();\n        \n        for(int i=0; i<n-1; i++) {\n            for(int j=0; j<n-i-1; j++) {\n                if(arr[j] > arr[j+1]) {\n                    int temp = arr[j];\n                    arr[j] = arr[j+1];\n                    arr[j+1] = temp;\n                }\n            }\n        }\n        for(int num : arr) System.out.print(num + \" \");\n    }\n}', '1.0', '2025-02-09 21:05:55', '2025-02-09 21:05:55');
INSERT INTO `solution_code` (`id`, `solution_id`, `language_id`, `standard_solution`, `version`, `created_at`, `updated_at`) VALUES (70, 11, 4, '#include <iostream>\nusing namespace std;\n\nint main() {\n    int n;\n    cin >> n;\n    int arr[100];\n    for(int i=0; i<n; ++i) cin >> arr[i];\n    \n    for(int i=0; i<n-1; ++i)\n        for(int j=0; j<n-i-1; ++j)\n            if(arr[j] > arr[j+1])\n                swap(arr[j], arr[j+1]);\n    \n    for(int i=0; i<n; ++i) cout << arr[i] << \" \";\n    return 0;\n}', '1.0', '2025-02-09 21:05:55', '2025-02-09 21:05:55');
INSERT INTO `solution_code` (`id`, `solution_id`, `language_id`, `standard_solution`, `version`, `created_at`, `updated_at`) VALUES (71, 12, 2, 's, c = input().split()\nprint(s.count(c))', '1.0', '2025-02-09 21:05:55', '2025-02-09 21:05:55');
INSERT INTO `solution_code` (`id`, `solution_id`, `language_id`, `standard_solution`, `version`, `created_at`, `updated_at`) VALUES (72, 12, 3, 'import java.util.Scanner;\n\npublic class Main {\n    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n        String s = sc.next();\n        char target = sc.next().charAt(0);\n        int count = 0;\n        for(char ch : s.toCharArray()) {\n            if(ch == target) count++;\n        }\n        System.out.println(count);\n    }\n}', '1.0', '2025-02-09 21:05:55', '2025-02-09 21:05:55');
INSERT INTO `solution_code` (`id`, `solution_id`, `language_id`, `standard_solution`, `version`, `created_at`, `updated_at`) VALUES (73, 12, 4, '#include <iostream>\n#include <string>\nusing namespace std;\n\nint main() {\n    string s;\n    char target;\n    cin >> s >> target;\n    int count = 0;\n    for(char c : s) {\n        if(c == target) count++;\n    }\n    cout << count << endl;\n    return 0;\n}', '1.0', '2025-02-09 21:05:55', '2025-02-09 21:05:55');
INSERT INTO `solution_code` (`id`, `solution_id`, `language_id`, `standard_solution`, `version`, `created_at`, `updated_at`) VALUES (74, 13, 2, 's = input().split()\nprint(\" \".join([word for word in s if word != \"world\"]))', '1.0', '2025-02-09 21:05:55', '2025-02-09 21:05:55');
INSERT INTO `solution_code` (`id`, `solution_id`, `language_id`, `standard_solution`, `version`, `created_at`, `updated_at`) VALUES (75, 13, 3, 'import java.util.*;\n\npublic class Main {\n    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n        String[] words = sc.nextLine().split(\" \");\n        StringBuilder sb = new StringBuilder();\n        for(String word : words) {\n            if(!word.equals(\"world\")) {\n                sb.append(word).append(\" \");\n            }\n        }\n        System.out.println(sb.toString().trim());\n    }\n}', '1.0', '2025-02-09 21:05:55', '2025-02-09 21:05:55');
INSERT INTO `solution_code` (`id`, `solution_id`, `language_id`, `standard_solution`, `version`, `created_at`, `updated_at`) VALUES (76, 13, 4, '#include <iostream>\n#include <string>\n#include <sstream>\nusing namespace std;\n\nint main() {\n    string line, word;\n    getline(cin, line);\n    stringstream ss(line);\n    bool first = true;\n    \n    while(ss >> word) {\n        if(word != \"world\") {\n            if(!first) cout << \" \";\n            cout << word;\n            first = false;\n        }\n    }\n    return 0;\n}', '1.0', '2025-02-09 21:05:55', '2025-02-09 21:05:55');
INSERT INTO `solution_code` (`id`, `solution_id`, `language_id`, `standard_solution`, `version`, `created_at`, `updated_at`) VALUES (77, 14, 2, 'a, b = map(int, input().split())\nimport math\nprint(math.gcd(a, b))', '1.0', '2025-02-09 21:05:55', '2025-02-09 21:05:55');
INSERT INTO `solution_code` (`id`, `solution_id`, `language_id`, `standard_solution`, `version`, `created_at`, `updated_at`) VALUES (78, 14, 3, 'import java.util.Scanner;\n\npublic class Main {\n    public static int gcd(int a, int b) {\n        return b == 0 ? a : gcd(b, a % b);\n    }\n    \n    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n        int a = sc.nextInt();\n        int b = sc.nextInt();\n        System.out.println(gcd(a, b));\n    }\n}', '1.0', '2025-02-09 21:05:55', '2025-02-09 21:05:55');
INSERT INTO `solution_code` (`id`, `solution_id`, `language_id`, `standard_solution`, `version`, `created_at`, `updated_at`) VALUES (79, 14, 4, '#include <iostream>\nusing namespace std;\n\nint gcd(int a, int b) {\n    return b == 0 ? a : gcd(b, a % b);\n}\n\nint main() {\n    int a, b;\n    cin >> a >> b;\n    cout << gcd(a, b) << endl;\n    return 0;\n}', '1.0', '2025-02-09 21:05:55', '2025-02-09 21:05:55');
INSERT INTO `solution_code` (`id`, `solution_id`, `language_id`, `standard_solution`, `version`, `created_at`, `updated_at`) VALUES (80, 15, 2, 'n = input()\nprint(\"是\" if n == n[::-1] else \"否\")', '1.0', '2025-02-09 21:05:55', '2025-02-09 21:05:55');
INSERT INTO `solution_code` (`id`, `solution_id`, `language_id`, `standard_solution`, `version`, `created_at`, `updated_at`) VALUES (81, 15, 3, 'import java.util.Scanner;\n\npublic class Main {\n    public static void main(String[] args) {\n        String n = new Scanner(System.in).next();\n        System.out.println(new StringBuilder(n).reverse().toString().equals(n) ? \"是\" : \"否\");\n    }\n}', '1.0', '2025-02-09 21:05:55', '2025-02-09 21:05:55');
INSERT INTO `solution_code` (`id`, `solution_id`, `language_id`, `standard_solution`, `version`, `created_at`, `updated_at`) VALUES (82, 15, 4, '#include <iostream>\n#include <string>\n#include <algorithm>\nusing namespace std;\n\nint main() {\n    string s;\n    cin >> s;\n    string rev = s;\n    reverse(rev.begin(), rev.end());\n    cout << (s == rev ? \"是\" : \"否\") << endl;\n    return 0;\n}', '1.0', '2025-02-09 21:05:55', '2025-02-09 21:05:55');
INSERT INTO `solution_code` (`id`, `solution_id`, `language_id`, `standard_solution`, `version`, `created_at`, `updated_at`) VALUES (83, 16, 2, 'n, m = map(int, input().split())\nmat1 = [list(map(int, input().split())) for _ in range(n)]\nmat2 = [list(map(int, input().split())) for _ in range(n)]\nfor i in range(n):\n    print(\" \".join(map(str, [a+b for a,b in zip(mat1[i], mat2[i])])))', '1.0', '2025-02-09 21:13:51', '2025-02-09 21:13:51');
INSERT INTO `solution_code` (`id`, `solution_id`, `language_id`, `standard_solution`, `version`, `created_at`, `updated_at`) VALUES (84, 16, 3, 'import java.util.*;\n\npublic class Main {\n    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n        int n = sc.nextInt();\n        int m = sc.nextInt();\n        int[][] mat1 = new int[n][m];\n        int[][] mat2 = new int[n][m];\n        \n        for(int i=0; i<n; i++)\n            for(int j=0; j<m; j++)\n                mat1[i][j] = sc.nextInt();\n        \n        for(int i=0; i<n; i++)\n            for(int j=0; j<m; j++)\n                mat2[i][j] = sc.nextInt();\n        \n        for(int i=0; i<n; i++) {\n            for(int j=0; j<m; j++)\n                System.out.print((mat1[i][j]+mat2[i][j]) + \" \");\n            System.out.println();\n        }\n    }\n}', '1.0', '2025-02-09 21:13:51', '2025-02-09 21:13:51');
INSERT INTO `solution_code` (`id`, `solution_id`, `language_id`, `standard_solution`, `version`, `created_at`, `updated_at`) VALUES (85, 16, 4, '#include <iostream>\nusing namespace std;\n\nint main() {\n    int n, m;\n    cin >> n >> m;\n    int mat1[10][10], mat2[10][10];\n    \n    for(int i=0; i<n; ++i)\n        for(int j=0; j<m; ++j)\n            cin >> mat1[i][j];\n    \n    for(int i=0; i<n; ++i)\n        for(int j=0; j<m; ++j)\n            cin >> mat2[i][j];\n    \n    for(int i=0; i<n; ++i) {\n        for(int j=0; j<m; ++j)\n            cout << mat1[i][j] + mat2[i][j] << \" \";\n        cout << endl;\n    }\n    return 0;\n}', '1.0', '2025-02-09 21:13:51', '2025-02-09 21:13:51');
INSERT INTO `solution_code` (`id`, `solution_id`, `language_id`, `standard_solution`, `version`, `created_at`, `updated_at`) VALUES (86, 17, 2, 'print(\" \".join(input().split()[::-1]))', '1.0', '2025-02-09 21:13:51', '2025-02-09 21:13:51');
INSERT INTO `solution_code` (`id`, `solution_id`, `language_id`, `standard_solution`, `version`, `created_at`, `updated_at`) VALUES (87, 17, 3, 'import java.util.*;\n\npublic class Main {\n    public static void main(String[] args) {\n        String[] words = new Scanner(System.in).nextLine().split(\" \");\n        for(int i=words.length-1; i>=0; i--)\n            System.out.print(words[i] + (i>0 ? \" \" : \"\"));\n    }\n}', '1.0', '2025-02-09 21:13:51', '2025-02-09 21:13:51');
INSERT INTO `solution_code` (`id`, `solution_id`, `language_id`, `standard_solution`, `version`, `created_at`, `updated_at`) VALUES (88, 17, 4, '#include <iostream>\n#include <sstream>\n#include <vector>\nusing namespace std;\n\nint main() {\n    string line, word;\n    vector<string> words;\n    getline(cin, line);\n    stringstream ss(line);\n    \n    while(ss >> word) words.push_back(word);\n    \n    for(int i=words.size()-1; i>=0; --i)\n        cout << words[i] << (i>0 ? \" \" : \"\");\n    return 0;\n}', '1.0', '2025-02-09 21:13:51', '2025-02-09 21:13:51');
INSERT INTO `solution_code` (`id`, `solution_id`, `language_id`, `standard_solution`, `version`, `created_at`, `updated_at`) VALUES (89, 18, 2, 'n = int(input())\ntri = [[1]*(i+1) for i in range(n)]\nfor i in range(2, n):\n    for j in range(1, i):\n        tri[i][j] = tri[i-1][j-1] + tri[i-1][j]\nfor row in tri:\n    print(\" \".join(map(str, row)))', '1.0', '2025-02-09 21:13:51', '2025-02-09 21:13:51');
INSERT INTO `solution_code` (`id`, `solution_id`, `language_id`, `standard_solution`, `version`, `created_at`, `updated_at`) VALUES (90, 18, 3, 'import java.util.*;\n\npublic class Main {\n    public static void main(String[] args) {\n        int n = new Scanner(System.in).nextInt();\n        int[][] tri = new int[n][];\n        for(int i=0; i<n; i++) {\n            tri[i] = new int[i+1];\n            tri[i][0] = 1;\n            for(int j=1; j<i; j++)\n                tri[i][j] = tri[i-1][j-1] + tri[i-1][j];\n            tri[i][i] = 1;\n        }\n        for(int[] row : tri) {\n            for(int num : row) System.out.print(num + \" \");\n            System.out.println();\n        }\n    }\n}', '1.0', '2025-02-09 21:13:51', '2025-02-09 21:13:51');
INSERT INTO `solution_code` (`id`, `solution_id`, `language_id`, `standard_solution`, `version`, `created_at`, `updated_at`) VALUES (91, 18, 4, '#include <iostream>\nusing namespace std;\n\nint main() {\n    int n;\n    cin >> n;\n    int tri[30][30] = {0};\n    \n    for(int i=0; i<n; ++i) {\n        tri[i][0] = 1;\n        for(int j=1; j<=i; ++j)\n            tri[i][j] = tri[i-1][j-1] + tri[i-1][j];\n    }\n    \n    for(int i=0; i<n; ++i) {\n        for(int j=0; j<=i; ++j)\n            cout << tri[i][j] << \" \";\n        cout << endl;\n    }\n    return 0;\n}', '1.0', '2025-02-09 21:13:51', '2025-02-09 21:13:51');
INSERT INTO `solution_code` (`id`, `solution_id`, `language_id`, `standard_solution`, `version`, `created_at`, `updated_at`) VALUES (92, 19, 2, 'def is_prime(n):\n    if n < 2: return False\n    for i in range(2, int(n**0.5)+1):\n        if n%i ==0: return False\n    return True\n\nstart, end = map(int, input().split())\nprimes = [str(i) for i in range(start, end+1) if is_prime(i)]\nprint(\" \".join(primes) if primes else \"\")', '1.0', '2025-02-09 21:13:51', '2025-02-09 21:13:51');
INSERT INTO `solution_code` (`id`, `solution_id`, `language_id`, `standard_solution`, `version`, `created_at`, `updated_at`) VALUES (93, 19, 3, 'import java.util.*;\n\npublic class Main {\n    static boolean isPrime(int n) {\n        if(n < 2) return false;\n        for(int i=2; i*i<=n; i++)\n            if(n%i ==0) return false;\n        return true;\n    }\n    \n    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n        int a = sc.nextInt();\n        int b = sc.nextInt();\n        StringBuilder sb = new StringBuilder();\n        for(int i=a; i<=b; i++) {\n            if(isPrime(i)) sb.append(i).append(\" \");\n        }\n        System.out.println(sb.length()>0 ? sb.toString().trim() : \"\");\n    }\n}', '1.0', '2025-02-09 21:13:51', '2025-02-09 21:13:51');
INSERT INTO `solution_code` (`id`, `solution_id`, `language_id`, `standard_solution`, `version`, `created_at`, `updated_at`) VALUES (94, 19, 4, '#include <iostream>\n#include <cmath>\nusing namespace std;\n\nbool isPrime(int n) {\n    if(n <= 1) return false;\n    for(int i=2; i<=sqrt(n); ++i)\n        if(n%i == 0) return false;\n    return true;\n}\n\nint main() {\n    int a, b;\n    cin >> a >> b;\n    bool first = true;\n    for(int i=a; i<=b; ++i) {\n        if(isPrime(i)) {\n            if(!first) cout << \" \";\n            cout << i;\n            first = false;\n        }\n    }\n    return 0;\n}', '1.0', '2025-02-09 21:13:51', '2025-02-09 21:13:51');
INSERT INTO `solution_code` (`id`, `solution_id`, `language_id`, `standard_solution`, `version`, `created_at`, `updated_at`) VALUES (95, 20, 2, 'n = int(input())\narr = list(map(int, input().split()))\nseen = set()\nresult = []\nfor num in arr:\n    if num not in seen:\n        seen.add(num)\n        result.append(str(num))\nprint(\" \".join(result))', '1.0', '2025-02-09 21:13:51', '2025-02-09 21:13:51');
INSERT INTO `solution_code` (`id`, `solution_id`, `language_id`, `standard_solution`, `version`, `created_at`, `updated_at`) VALUES (96, 20, 3, 'import java.util.*;\n\npublic class Main {\n    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n        int n = sc.nextInt();\n        LinkedHashSet<Integer> set = new LinkedHashSet<>();\n        while(n-- > 0) set.add(sc.nextInt());\n        for(int num : set) System.out.print(num + \" \");\n    }\n}', '1.0', '2025-02-09 21:13:51', '2025-02-09 21:13:51');
INSERT INTO `solution_code` (`id`, `solution_id`, `language_id`, `standard_solution`, `version`, `created_at`, `updated_at`) VALUES (97, 20, 4, '#include <iostream>\n#include <unordered_set>\nusing namespace std;\n\nint main() {\n    int n, tmp;\n    cin >> n;\n    unordered_set<int> seen;\n    int arr[100];\n    \n    for(int i=0; i<n; ++i) {\n        cin >> tmp;\n        if(seen.insert(tmp).second) {\n            cout << tmp << \" \";\n        }\n    }\n    return 0;\n}', '1.0', '2025-02-09 21:13:51', '2025-02-09 21:13:51');
INSERT INTO `solution_code` (`id`, `solution_id`, `language_id`, `standard_solution`, `version`, `created_at`, `updated_at`) VALUES (98, 21, 2, 'n = int(input())\nprint(sum(map(int, input().split())))', '1.0', '2025-02-09 21:14:07', '2025-02-09 21:14:07');
INSERT INTO `solution_code` (`id`, `solution_id`, `language_id`, `standard_solution`, `version`, `created_at`, `updated_at`) VALUES (99, 21, 3, 'import java.util.*;\n\npublic class Main {\n    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n        int n = sc.nextInt();\n        int sum = 0;\n        while(n-- > 0) sum += sc.nextInt();\n        System.out.println(sum);\n    }\n}', '1.0', '2025-02-09 21:14:07', '2025-02-09 21:14:07');
INSERT INTO `solution_code` (`id`, `solution_id`, `language_id`, `standard_solution`, `version`, `created_at`, `updated_at`) VALUES (100, 21, 4, '#include <iostream>\nusing namespace std;\n\nint main() {\n    int n, tmp, sum = 0;\n    cin >> n;\n    while(n--) {\n        cin >> tmp;\n        sum += tmp;\n    }\n    cout << sum << endl;\n    return 0;\n}', '1.0', '2025-02-09 21:14:07', '2025-02-09 21:14:07');
INSERT INTO `solution_code` (`id`, `solution_id`, `language_id`, `standard_solution`, `version`, `created_at`, `updated_at`) VALUES (101, 22, 2, 's = input().strip()\nprint(s[::-1])', '1.0', '2025-02-09 21:14:07', '2025-02-09 21:14:07');
INSERT INTO `solution_code` (`id`, `solution_id`, `language_id`, `standard_solution`, `version`, `created_at`, `updated_at`) VALUES (102, 22, 3, 'import java.util.Scanner;\n\npublic class Main {\n    public static void main(String[] args) {\n        String s = new Scanner(System.in).next();\n        System.out.println(new StringBuilder(s).reverse());\n    }\n}', '1.0', '2025-02-09 21:14:07', '2025-02-09 21:14:07');
INSERT INTO `solution_code` (`id`, `solution_id`, `language_id`, `standard_solution`, `version`, `created_at`, `updated_at`) VALUES (103, 22, 4, '#include <iostream>\n#include <algorithm>\nusing namespace std;\n\nint main() {\n    string s;\n    cin >> s;\n    reverse(s.begin(), s.end());\n    cout << s << endl;\n    return 0;\n}', '1.0', '2025-02-09 21:14:07', '2025-02-09 21:14:07');
INSERT INTO `solution_code` (`id`, `solution_id`, `language_id`, `standard_solution`, `version`, `created_at`, `updated_at`) VALUES (104, 23, 2, 'n = int(input())\na, b = 0, 1\nfor _ in range(n):\n    a, b = b, a + b\nprint(a)', '1.0', '2025-02-09 21:14:07', '2025-02-09 21:14:07');
INSERT INTO `solution_code` (`id`, `solution_id`, `language_id`, `standard_solution`, `version`, `created_at`, `updated_at`) VALUES (105, 23, 3, 'import java.util.Scanner;\n\npublic class Main {\n    public static void main(String[] args) {\n        int n = new Scanner(System.in).nextInt();\n        int a = 0, b = 1;\n        for(int i=0; i<n; i++) {\n            int c = a + b;\n            a = b;\n            b = c;\n        }\n        System.out.println(a);\n    }\n}', '1.0', '2025-02-09 21:14:07', '2025-02-09 21:14:07');
INSERT INTO `solution_code` (`id`, `solution_id`, `language_id`, `standard_solution`, `version`, `created_at`, `updated_at`) VALUES (106, 23, 4, '#include <iostream>\nusing namespace std;\n\nint main() {\n    int n;\n    cin >> n;\n    int a = 0, b = 1;\n    for(int i=0; i<n; ++i) {\n        int c = a + b;\n        a = b;\n        b = c;\n    }\n    cout << a << endl;\n    return 0;\n}', '1.0', '2025-02-09 21:14:07', '2025-02-09 21:14:07');
INSERT INTO `solution_code` (`id`, `solution_id`, `language_id`, `standard_solution`, `version`, `created_at`, `updated_at`) VALUES (110, 25, 2, 'n = int(input())\nprint(\"是\" if n % 2 == 0 else \"否\")', '1.0', '2025-02-09 21:14:07', '2025-02-09 21:14:07');
INSERT INTO `solution_code` (`id`, `solution_id`, `language_id`, `standard_solution`, `version`, `created_at`, `updated_at`) VALUES (111, 25, 3, 'import java.util.Scanner;\n\npublic class Main {\n    public static void main(String[] args) {\n        int n = new Scanner(System.in).nextInt();\n        System.out.println(n % 2 == 0 ? \"是\" : \"否\");\n    }\n}', '1.0', '2025-02-09 21:14:07', '2025-02-09 21:14:07');
INSERT INTO `solution_code` (`id`, `solution_id`, `language_id`, `standard_solution`, `version`, `created_at`, `updated_at`) VALUES (112, 25, 4, '#include <iostream>\nusing namespace std;\n\nint main() {\n    int n;\n    cin >> n;\n    cout << (n % 2 == 0 ? \"是\" : \"否\") << endl;\n    return 0;\n}', '1.0', '2025-02-09 21:14:07', '2025-02-09 21:14:07');
INSERT INTO `solution_code` (`id`, `solution_id`, `language_id`, `standard_solution`, `version`, `created_at`, `updated_at`) VALUES (122, 29, 2, 'print(int(input(), 2))', '1.0', '2025-02-09 21:14:07', '2025-02-09 21:14:07');
INSERT INTO `solution_code` (`id`, `solution_id`, `language_id`, `standard_solution`, `version`, `created_at`, `updated_at`) VALUES (123, 29, 3, 'import java.util.Scanner;\n\npublic class Main {\n    public static void main(String[] args) {\n        String binary = new Scanner(System.in).next();\n        System.out.println(Integer.parseInt(binary, 2));\n    }\n}', '1.0', '2025-02-09 21:14:07', '2025-02-09 21:14:07');
INSERT INTO `solution_code` (`id`, `solution_id`, `language_id`, `standard_solution`, `version`, `created_at`, `updated_at`) VALUES (124, 29, 4, '#include <iostream>\n#include <string>\nusing namespace std;\n\nint main() {\n    string s;\n    cin >> s;\n    int num = 0;\n    for(char c : s)\n        num = num * 2 + (c - \'0\');\n    cout << num << endl;\n    return 0;\n}', '1.0', '2025-02-09 21:14:07', '2025-02-09 21:14:07');
INSERT INTO `solution_code` (`id`, `solution_id`, `language_id`, `standard_solution`, `version`, `created_at`, `updated_at`) VALUES (128, 33, 1, 'ccccc', '1.0', '2025-02-25 18:45:04', '2025-02-25 18:59:54');
INSERT INTO `solution_code` (`id`, `solution_id`, `language_id`, `standard_solution`, `version`, `created_at`, `updated_at`) VALUES (129, 33, 4, 'c++ccccc', '1.0', '2025-02-25 18:45:04', '2025-02-25 18:59:54');
INSERT INTO `solution_code` (`id`, `solution_id`, `language_id`, `standard_solution`, `version`, `created_at`, `updated_at`) VALUES (130, 33, 3, 'javaccccc', '1.0', '2025-02-25 18:45:04', '2025-02-25 18:59:54');
INSERT INTO `solution_code` (`id`, `solution_id`, `language_id`, `standard_solution`, `version`, `created_at`, `updated_at`) VALUES (131, 33, 2, 'pythoncccccc', '1.0', '2025-02-25 18:45:04', '2025-02-25 18:59:54');
INSERT INTO `solution_code` (`id`, `solution_id`, `language_id`, `standard_solution`, `version`, `created_at`, `updated_at`) VALUES (132, 34, 1, '', '1.0', '2025-02-25 18:49:52', '2025-02-25 18:49:52');
INSERT INTO `solution_code` (`id`, `solution_id`, `language_id`, `standard_solution`, `version`, `created_at`, `updated_at`) VALUES (133, 34, 2, '', '1.0', '2025-02-25 18:49:52', '2025-02-25 18:49:52');
INSERT INTO `solution_code` (`id`, `solution_id`, `language_id`, `standard_solution`, `version`, `created_at`, `updated_at`) VALUES (134, 34, 3, 'ceshi', '1.0', '2025-02-25 18:49:52', '2025-02-25 18:51:55');
INSERT INTO `solution_code` (`id`, `solution_id`, `language_id`, `standard_solution`, `version`, `created_at`, `updated_at`) VALUES (135, 34, 4, 'ceshi', '1.0', '2025-02-25 18:49:52', '2025-02-25 18:53:02');
INSERT INTO `solution_code` (`id`, `solution_id`, `language_id`, `standard_solution`, `version`, `created_at`, `updated_at`) VALUES (136, 35, 1, 'dawd', '1.0', '2025-02-25 19:00:52', '2025-02-25 19:00:52');
INSERT INTO `solution_code` (`id`, `solution_id`, `language_id`, `standard_solution`, `version`, `created_at`, `updated_at`) VALUES (137, 35, 4, 'dwada', '1.0', '2025-02-25 19:00:52', '2025-02-25 19:00:52');
INSERT INTO `solution_code` (`id`, `solution_id`, `language_id`, `standard_solution`, `version`, `created_at`, `updated_at`) VALUES (138, 35, 3, 'dwada', '1.0', '2025-02-25 19:00:52', '2025-02-25 19:00:52');
INSERT INTO `solution_code` (`id`, `solution_id`, `language_id`, `standard_solution`, `version`, `created_at`, `updated_at`) VALUES (139, 35, 2, 'dawdaw', '1.0', '2025-02-25 19:00:52', '2025-02-25 19:00:52');
INSERT INTO `solution_code` (`id`, `solution_id`, `language_id`, `standard_solution`, `version`, `created_at`, `updated_at`) VALUES (140, 36, 1, 'c', '1.0', '2025-04-04 11:13:32', '2025-04-04 11:13:32');
INSERT INTO `solution_code` (`id`, `solution_id`, `language_id`, `standard_solution`, `version`, `created_at`, `updated_at`) VALUES (141, 36, 4, 'cpp', '1.0', '2025-04-04 11:13:32', '2025-04-04 11:13:32');
INSERT INTO `solution_code` (`id`, `solution_id`, `language_id`, `standard_solution`, `version`, `created_at`, `updated_at`) VALUES (142, 36, 3, 'java', '1.0', '2025-04-04 11:13:32', '2025-04-04 11:13:32');
INSERT INTO `solution_code` (`id`, `solution_id`, `language_id`, `standard_solution`, `version`, `created_at`, `updated_at`) VALUES (143, 36, 2, 'python', '1.0', '2025-04-04 11:13:32', '2025-04-04 11:13:32');
COMMIT;

SET FOREIGN_KEY_CHECKS = 1;
