# 项目迭代日志

{ 2023-04-22 } 改动: 修复Docker环境下前端API请求路径重复导致404错误问题

主要改动文件:

1. - frontend
    |- src
      |- views
        |- problems
          |- detail
            |- ProblemDetail.vue
              |- description: 问题详情页面，修复了API请求中重复的/api/前缀。

    |- src
      |- api
        |- testCase.js
          |- description: 测试用例API文件，修复了直接使用axios而不是配置好的request实例的问题。

主要改动逻辑:

- 在`ProblemDetail.vue`文件中，将API请求路径从`/api/problems/${problemNumber}`修改为`problems/${problemNumber}`，避免路径前缀重复
- 在`testCase.js`文件中，将所有API请求从使用`axios.get('/api/...')`修改为使用`request.get('...')`，使用已配置好的request实例
- 创建了问题记录文件`api_path_docker_bug_fixed.md`，详细记录了问题原因和解决方案

问题出现原因:

- Docker环境中，Nginx将`/api`路径反向代理到后端服务
- 前端axios实例已配置了`baseURL: '/api'`，但在API请求路径中又添加了`/api/`前缀
- 导致最终请求变成了`/api/api/problems/0001`等形式，后端找不到对应路由

解决问题使用的简要方案:

- 移除API请求路径中重复的`/api/`前缀
- 统一使用项目配置的API请求实例，如`request`或`apiService`
- 将直接使用`axios`的方法改为使用已配置的请求实例

{ 2025-04-21 } 改动: 修复Docker部署环境下API路径错误问题

主要改动文件:

1. - frontend
    |- src
      |- utils
        |- request.js
          |- description: axios请求配置文件，修改了baseURL设置，避免API路径重复。

主要改动逻辑:

- 将axios实例的baseURL参数从`process.env.VUE_APP_BASE_API || ''`修改为空字符串`''`
- 这样避免了在实际请求中重复添加`/api`前缀，解决了路径重复的问题

问题出现原因:

- Docker环境中前端的环境变量`VUE_APP_BASE_API`被设置为`/api`
- 在实际API请求路径中，开发者也手动添加了`/api`前缀
- 导致最终请求变成了`/api/api/xxx`的形式，造成404错误

解决问题使用的简要方案:

- 修改前端request.js中的baseURL设置
- 重新构建前端Docker容器
- 创建bug修复记录文件，记录问题分析和解决方案

{ 2025-04-21 } 改动: 修复后端容器Docker命令无法使用的问题

主要改动文件:

1. - backend
    |- Dockerfile
      |- description: 后端容器构建文件，添加了Docker命令行工具的安装

2. - docker-compose.yml
    |- description: 项目容器编排文件，修改了后端容器的权限设置

主要改动逻辑:

- 在后端Dockerfile中，添加了docker-cli包的安装，使容器内可以执行Docker命令
- 在docker-compose.yml中，为后端容器添加privileged: true特权模式
- 注释掉了用户ID和组ID的设置，使容器以root用户运行，确保有足够权限访问Docker socket

问题出现原因:

- 后端容器需要使用Docker来创建判题沙箱，但容器内部缺少Docker命令行工具
- 容器用户权限不足，无法正常访问宿主机的Docker守护进程
- Docker socket虽然已挂载到容器中，但权限设置不正确

解决问题使用的简要方案:

- 安装Docker CLI工具到容器中
- 使用特权模式运行容器，确保有足够权限访问Docker
- 重新构建并启动容器，使更改生效

{ 2025.4.17 } 改动: 修复用户删除功能的外键约束问题

主要改动文件:

1. - backend
    |- src
      |- api
        |- user
          |- index.js
            |- description: 用户API相关文件，修复了删除用户时的外键约束问题。

主要改动逻辑:

- 在删除用户前，先处理该用户在各个表中的外键引用关系
- 对于关键业务数据（如社区、课堂等），将用户引用更新为管理员ID(1)
- 对于用户个人数据（如提交记录、点赞等），直接删除相关记录
- 所有操作在事务中执行，确保数据一致性

问题出现原因:

- 数据库设计时，多个表通过外键约束引用了users表的id字段
- 删除用户时，由于这些外键约束的存在，MySQL阻止删除被引用的用户记录
- 原始代码未处理这些外键关系，导致删除操作失败

解决问题使用的简要方案:

- 识别所有引用users表的外键约束
- 对不同类型的数据采用不同策略：关键业务数据转移所有权，用户个人数据直接删除
- 使用事务确保所有操作的原子性，任何步骤失败都会回滚整个操作

{ 2025.4.18 } 改动: 新增测试用户账户和班级数据

主要改动文件:

1. - backend
    |- public
      |- uploads
        |- avatars
          |- description: 新增20个用户头像文件，命名格式符合系统规范。

2. - docs
    |- accounts.md
      |- description: 记录新增的20个测试账户信息，包括用户名、密码、权限等详细资料。

主要改动逻辑:

- 在数据库中创建10个不同专业的班级
- 新增20个不同权限的用户账户：2个管理员、5个教师、3个超级VIP、10个普通用户
- 为每个用户生成随机头像并保存到系统中
- 为每个用户创建详细的个人资料和学生信息，分配到不同班级和专业
- 将所有账户信息记录到accounts.md文件中，便于测试和演示

问题出现原因:

- 系统需要更多测试用户数据，以便测试不同权限的功能和数据展示效果
- 需要多个班级数据用于测试班级管理和数据统计功能

解决问题使用的简要方案:

- 使用系统现有的密码加密机制创建账户，确保所有用户密码一致便于测试
- 利用公开API获取随机头像，避免版权问题
- 模拟真实学校的班级和专业命名规则，创建有意义的测试数据
- 完整记录所有添加的数据，便于后续参考和使用

{ 2025.4.18 } 改动: 优化problems表和problem_categories表结构

主要改动文件:

1. - backend
    |- database
      |- schema
        |- problem_categories.sql
          |- description: 修改了problem_categories表结构，增加了更多描述性字段。
        |- problem_category_relations.sql
          |- description: 新增中间表存储问题和分类的多对多关系。
        |- triggers.sql
          |- description: 新增触发器，自动维护问题和分类的关联关系。

主要改动逻辑:

- 重构了problem_categories表，增加level、slug、icon等字段，更好地支持分类层次结构
- 创建problem_category_relations中间表，实现问题和分类的多对多关系管理
- 基于problems表的tags字段，提取出所有标签，作为分类添加到新表中
- 创建触发器，当问题的tags字段变化时，自动更新关联表
- 将原有表中的数据迁移到新表结构中，确保数据不丢失

问题出现原因:

- 原问题分类结构不够灵活，缺乏层次关系
- 原系统中的标签和分类是分离的，导致功能重复和维护困难
- 标签存储在problems表的tags字段中，格式为逗号分隔的字符串，不利于高效查询

解决问题使用的简要方案:

- 采用树形分类结构，通过parent_id建立层次关系
- 使用中间表存储多对多关系，优化查询效率
- 添加触发器自动维护关系，减少维护成本
- 保留problems表的tags字段作为兼容层，但将实际分类管理转移到专门的表中

{ 2025-05-20 } 改动: 修复 problems/index.vue 页面题目完成状态追踪功能

主要改动文件:

1. - frontend
    |- src
      |- views
        |- problems
          |- index.vue
            |- description: 题目列表页面，添加了获取用户题目完成状态的功能。

2. - backend
    |- src
      |- api
        |- problems
          |- index.js
            |- description: 添加了获取用户题目完成状态的API端点。

主要改动逻辑:

- 在前端的 `index.vue` 文件中，添加了 `fetchUserProblemStatus` 方法，在获取题目列表后调用该方法获取用户的题目完成状态。
- 在后端 `problems/index.js` 中，添加了 `/api/problems/user-status` 端点，通过查询 submissions 表获取用户最新的题目提交状态。

问题出现原因:

- 由于之前删除了 user_problem_status 表，导致题目列表页面无法跟踪用户是否完成了题目。

解决问题使用的简要方案:

- 参考学习计划详情页面 (learning-plans/detail.vue) 的实现方式，不再依赖已删除的 user_problem_status 表，而是直接查询 submissions 表获取用户的题目完成状态。

{ 2023.05.29 } 改动: 将"AI中心"更名为"个人中心"

主要改动文件:

1. - frontend
    |- src
      |- views
        |- personal
          |- PersonalCenter.vue
            |- description: 新创建的个人中心组件，替代原来的AI中心组件。
      |- router
        |- index.js
          |- description: 更新了路由配置，从'/ai-center'改为'/personal-center'，组件从AICenter改为PersonalCenter。
      |- components
        |- NavBar.vue
          |- description: 修改了导航栏中的链接文本从"AI中心"改为"个人中心"，路径从"/ai-center"改为"/personal-center"。
      |- views
        |- home
          |- index.vue
            |- description: 修改了首页中的特性卡片，从"AI中心"改为"个人中心"，并更新了描述文本。

主要改动逻辑:

- 将所有与"AI中心"相关的组件、路由和链接更新为"个人中心"。
- 创建了新的个人中心组件文件夹和文件，将原来的AI中心文件夹和文件替换。
- 更新了导航栏、首页和路由配置中的相关文本和路径。

问题出现原因:

- 需要将原来的"AI中心"功能重新定位为更通用的"个人中心"，以便包含更多与用户个人相关的功能。

解决问题使用的简要方案:

- 创建新的个人中心组件，替换原来的AI中心组件。
- 更新所有相关的路由配置和链接。
- 保持功能的连续性，确保用户体验不受影响。

{ 2025-04-19 } 改动: 修复Java代码判题类名识别问题

主要改动文件:

1. - backend
    |- src
      |- services
        |- judge
          |- sandbox.js
            |- description: 判题沙箱服务文件，修改了Java代码执行部分的类名识别逻辑。

主要改动逻辑:

- 在`runJava`方法中，不再简单地使用临时文件名作为Java类名
- 添加代码从Java源文件内容中提取实际的类定义
- 通过正则表达式获取用户定义的类名
- 当找不到类定义时，默认使用"Solution"类名（与preprocessJavaCode方法中创建的默认类名一致）

问题出现原因:

- 判题系统会将用户提交的Java代码保存为临时文件（如temp_1745028165148.java）
- 原有代码简单地使用文件名（不带扩展名）作为类名，这不符合Java的类加载机制
- preprocessJavaCode方法会将用户代码封装在名为"Solution"的类中（如果用户未提供自己的类定义）
- 这导致系统尝试使用"temp_1745028165148"作为类名，而实际编译后的类名是"Solution"
- 最终造成"ClassNotFoundException"错误，无法正确运行用户提交的Java代码

解决问题使用的简要方案:

- 从Java源文件内容中提取实际的类名
- 确保使用正确的类名执行Java程序
- 当无法提取到类名时，使用默认的"Solution"类名

{ 2023.07.15 } 改动: 修复C++判题功能

主要改动文件:

1. - backend
   |- src
      |- services
         |- judge
            |- sandbox.js
               |- description: 该文件负责创建判题沙箱环境和处理代码执行，修改了对C++语言识别的逻辑，添加了对'c++'标识符的支持。
            |- executor.js
               |- description: 负责具体执行判题逻辑的文件，修改了语言处理部分，统一标准化C++相关的语言标识符。

主要改动逻辑:

- 在`sandbox.js`文件中的`createSandbox`函数中，添加了对'c++'语言标识符的支持，将其映射到gcc镜像。
- 添加了将'c++'标准化为'cpp'的逻辑，使系统内部处理时统一使用'cpp'作为标识符。
- 在`execute`、`executeDebug`、`run`和`preprocessCode`方法中都添加了对'c++'的处理逻辑。

问题出现原因:

- 后端判题服务中只支持'cpp'作为C++语言的标识符，而前端提交时使用的是'C++'，经过转小写后变成'c++'，系统无法识别。

解决问题使用的简要方案:

- 添加对'c++'标识符的支持，并在内部统一转换为'cpp'进行处理，保持代码处理逻辑的一致性。

{ 2023.11.13 } 改动: 修复代码提交后答案显示的代码高亮失效问题

主要改动文件:

1. - frontend
    |- src
      |- views
        |- problems
          |- detail
            |- ProblemDetail.vue
              |- description: 问题详情页面，修复了代码高亮失效的问题

主要改动逻辑:

- 在提交代码后添加了自动应用代码高亮的逻辑，确保在切换到"提交记录"标签页时，代码高亮仍能正常工作。
- 增加了在切换标签页（特别是切换到"解决方案"和"提交记录"标签）时自动应用代码高亮的功能。
- 修改了解决方案代码块的语言类名，从固定的"language-javascript"改为动态绑定的语言类型，确保根据不同语言正确应用高亮。
- 在显示提交详情和获取提交记录后，添加了自动应用代码高亮的逻辑，确保在各种场景下代码高亮都能正常工作。
- 导入了所有支持的编程语言（C、C++、Java、Python、JavaScript）的Prism语法高亮模块。
- 添加了语言标识符标准化处理，如将"C++"映射为"cpp"，确保所有语言正确高亮。

问题出现原因:

- 在提交代码后，切换标签页过程中没有重新应用代码高亮，导致页面中的代码块失去了高亮效果。
- 解决方案代码块使用了固定的语言类型"javascript"，没有根据实际代码语言动态调整。
- Prism.js库默认只导入了C语言的语法支持，缺少对其他语言如Java、Python、C++的支持。
- 缺少对语言标识符的标准化处理机制，导致无法正确识别某些语言。

解决问题使用的简要方案:

- 使用Vue的nextTick函数确保DOM更新后再应用代码高亮。
- 在关键点（提交代码、切换标签页、显示提交详情、获取记录后）调用Prism.highlightAll()重新应用高亮。
- 对代码块使用动态类名绑定，确保根据代码的实际语言类型应用正确的高亮。
- 导入所有需要支持的编程语言的Prism高亮模块。
- 创建语言标识符映射函数，将各种常见的语言名称映射到Prism支持的标准标识符。

{ 2024.5.14 } 改动: 修复AI分析功能认证问题

主要改动文件:

1. - frontend
    |- src
      |- views
        |- problems
          |- detail
            |- ProblemDetail.vue
              |- description: 改进token获取逻辑，确保能正确获取和使用token，解决"请先登录"的提示问题。
      |- main.js
        |- description: 增强axios请求拦截器中的token处理能力，确保所有请求都能正确携带token。

2. - backend
    |- src
      |- middleware
        |- auth.js
          |- description: 改进token验证逻辑，添加更多日志输出以便调试。
        |- auth.middleware.js
          |- description: 修复使用的JWT密钥配置，统一使用jwtConfig.SECRET_KEY。
      |- controllers
        |- auth.controller.js
          |- description: 修复使用的JWT密钥配置，统一使用jwtConfig.SECRET_KEY。
      |- api
        |- ai
          |- index.js
            |- description: 增加详细的日志记录，方便排查认证问题。

主要改动逻辑:

- 统一了后端JWT令牌验证使用的密钥，确保所有验证使用相同的密钥配置。
- 改进了前端token获取逻辑，增强获取token的可靠性。
- 在前后端添加了更多日志记录以便更好地调试认证问题。
- 改进了错误处理和提示信息，提供更友好的用户体验。

问题出现原因:

- 在项目中同时存在两种不同的JWT密钥配置方式，导致验证失败。
- 前端token获取逻辑不够健壮，在某些情况下未能正确获取token。

解决问题使用的简要方案:

- 统一使用jwtConfig.SECRET_KEY作为JWT密钥配置。
- 增强前端token获取逻辑，确保能从多个可能的位置获取token。
- 完善日志记录，便于问题排查。

{ 2025.5.25 } 改动: 实现个人中心功能

主要改动文件:

1. - backend
    |- src
      |- api
        |- user
          |- profile.js
            |- description: 新增用户个人中心相关API，包括检查用户是否为学生、获取题目完成情况、知识点掌握情况、错误类型分析、解题用时分析等功能。
      |- app.js
        |- description: 添加用户个人中心API的路由配置。

2. - frontend
    |- src
      |- views
        |- personal
          |- PersonalCenter.vue
            |- description: 个人中心页面组件，用于展示用户学习数据统计和题目完成情况。

主要改动逻辑:

- 在后端添加了用户个人中心相关API，借鉴了管理员统计API的实现逻辑，但针对普通用户场景进行了调整，添加了身份验证和权限控制。
- 在前端实现了个人中心页面，包括四种统计图表和题目完成状态表格，可视化展示用户的学习情况。
- 添加了对非学生用户的检查和提示，确保只有已登记学生信息的用户可以访问个人中心功能。

问题出现原因:

- 原项目缺少用户统计数据展示功能，用户无法直观地了解自己的学习情况和进度。

解决问题使用的简要方案:

- 利用已有的管理员统计API实现逻辑，创建面向用户的个人中心API。
- 结合ECharts图表库和Element Plus组件库，实现数据可视化和表格展示。
- 添加用户身份验证和权限控制，确保数据安全和访问控制。

{ 2023.7.29 } 改动: 增加Docker部署支持，实现跨平台一键部署

主要改动文件:

1. - 项目根目录
    |- docker-compose.yml
      |- description: 定义了前端、后端和数据库的容器配置，实现服务编排

    |- docker-deployment-guide.md
      |- description: 详细说明了Docker部署的步骤、常见问题及解决方案

    |- README.md
      |- description: 添加了Docker部署相关说明

2. - backend
    |- Dockerfile
      |- description: 定义后端容器的构建步骤

    |- .dockerignore
      |- description: 排除不需要包含在后端Docker镜像中的文件

    |- .env
      |- description: 更新环境变量配置，适配Docker环境
    
    |- src
      |- services
        |- judge
          |- docker-helper.js
            |- description: 添加Docker辅助脚本，支持判题功能与宿主机Docker通信

      |- app.js
        |- description: 修改启动脚本，添加Docker环境初始化逻辑

3. - frontend
    |- Dockerfile
      |- description: 定义前端容器的构建步骤

    |- .dockerignore
      |- description: 排除不需要包含在前端Docker镜像中的文件

4. - 数据库文件
    |- init.sql
      |- description: 添加数据库初始化脚本，用于Docker容器启动时自动创建表结构和初始数据

主要改动逻辑:

- 添加了Docker配置文件，实现前端、后端和数据库的容器化部署
- 通过挂载宿主机Docker socket，解决了判题系统需要创建容器的问题
- 修改环境变量配置，使其适配Docker网络环境
- 添加了数据库初始化脚本，确保数据库表结构在部署时自动创建
- 添加了详细的部署文档，指导用户完成Docker部署

问题出现原因:

- 团队成员使用不同操作系统（Windows、macOS）开发和部署项目时遇到环境差异问题
- 项目判题部分依赖Docker容器，需要在容器内访问宿主机Docker
- 本地部署复杂，需要手动配置环境，容易出错

解决问题使用的简要方案:

- 使用Docker容器化技术，将所有组件（前端、后端、数据库）打包成容器
- 通过Docker Compose编排服务，实现一键部署
- 通过挂载Docker socket解决判题系统需要访问宿主机Docker的问题
- 提供详细的部署文档和重置方案，方便团队成员使用

{ 2023.10.25 } 改动: 修复Docker环境下bcrypt登录验证问题

主要改动文件:

1. - backend
    |- Dockerfile
      |- description: 替换Alpine镜像为完整Node.js镜像，并安装必要的构建工具

    |- src
      |- api
        |- login
          |- index.js
            |- description: 优化密码验证逻辑，添加bcrypt验证失败时的回退机制
        
        |- register
          |- index.js
            |- description: 创建用户注册API，确保使用bcrypt加密密码

      |- utils
        |- generateHash.js
          |- description: 创建脚本生成bcrypt哈希，用于数据库初始化

    |- docker-compose.yml
      |- description: 确保容器配置正确，支持bcrypt

2. - 数据库文件
    |- init.sql
      |- description: 修改users表结构，添加refresh_token字段，更新初始用户密码哈希值

主要改动逻辑:

- 修复了Docker环境中bcrypt无法正常工作的问题，通过更换基础镜像和安装必要依赖解决
- 优化了登录验证逻辑，增加了密码验证失败时的回退机制
- 修改数据库表结构，确保可以完整存储bcrypt哈希值和JWT刷新令牌
- 添加了用户注册API，规范用户创建流程

问题出现原因:

- Docker Alpine镜像缺少bcrypt所需的构建依赖
- 数据库表结构设计不完善，缺少refresh_token字段
- 初始化脚本中的密码哈希在某些环境中无法正确验证

解决问题使用的简要方案:

- 使用完整的Node.js镜像替代Alpine镜像
- 在Dockerfile中添加必要的构建工具
- 优化登录验证代码，增加验证失败的回退机制
- 修改数据库表结构，确保完整支持应用需求

{ 2023.10.26 } 改动: 修复数据库表结构不一致问题

主要改动文件:

1. - 数据库文件
    |- init.sql
      |- description: 更新了表结构定义，使其与完整的AIreview.sql文件保持一致

2. - project_information
    |- database_information
      |- AIreview_database_information
        |- description: 记录了数据库结构变更详情
    |- bug_fixed_information
      |- database_structure_issue.md
        |- description: 创建了问题修复记录文件，详细记录解决过程

主要改动逻辑:

- 更新了users表结构，包括完整的字段定义和正确的角色枚举值
- 更新了problems表结构，添加了problem_number等必要字段
- 调整了示例数据的插入语句，适配新的表结构
- 确保表引擎和字符集设置与实际使用一致

问题出现原因:

- 简化版的init.sql文件与实际系统使用的完整数据库结构不一致
- 角色枚举值定义不匹配，导致用户权限识别问题
- 缺少必要字段，影响系统功能正常运行

解决问题使用的简要方案:

- 从完整的AIreview.sql中提取表结构定义
- 保留现有的用户密码哈希值，确保登录系统正常工作
- 完整记录变更内容，方便后续排查问题

{ 2025.04.21 } 改动: 修复Docker部署下登录时数据库表不存在的问题

主要改动文件:

1. - db/init/01_schema.sql

		|- description: 新创建的数据库初始化脚本，用于创建用户相关的数据表并插入测试账号。

2. - project_information/database_information/AIreview_database_information.md

		|- description: 新增的数据库结构与操作记录文档，记录了数据库表的创建过程和测试账号信息。

3. - project_information/bug_fixed_information/login_database_issue.md

		|- description: 问题修复记录文档，详细记录了问题分析、解决方案和验证结果。

主要改动逻辑:

- 在Docker部署环境中创建基础的数据库表结构，包括users表和user_profile表，解决登录时的500错误。
- 添加了默认的测试账号（管理员、教师、学生），方便系统初始化后的功能测试。
- 完善了项目文档，记录数据库结构和问题修复过程，为后续维护提供参考。

问题出现原因:

- Docker部署时未配置数据库初始化脚本，导致容器启动后数据库中缺少必要的表结构。
- 项目初始设计缺少数据库初始化的相关文档和脚本，未考虑首次部署的场景。

解决问题使用的简要方案:

- 创建db/init目录和初始化SQL脚本，确保容器启动时会自动创建所需的数据库表。
- 通过docker-compose down和重新启动容器，应用新的数据库初始化脚本。
- 使用curl命令验证登录功能，确认问题解决。

{ 2024.8.13 } 改动: 优化跨域处理，从Nginx配置移至后端统一处理

主要改动文件:

1. - backend
    |- src
      |- app.js
        |- description: 增强Express的CORS配置，设置了更详细的跨域头信息和预检请求处理，避免浏览器跨域限制。

2. - nginx
    |- default.conf
      |- description: 移除Nginx中的CORS设置，由后端统一处理，简化代理层配置。

主要改动逻辑:

- 在后端`app.js`中，扩展了cors中间件配置，增加了methods、allowedHeaders等选项。
- 添加了全局响应头中间件，确保所有API响应都包含必要的跨域头信息。
- 增加了OPTIONS预检请求处理，确保浏览器在实际请求前的预检请求能得到正确响应。
- 移除了Nginx配置中的跨域相关设置，减少不必要的配置层级。

问题出现原因:

- 原系统通过Nginx层和后端两层同时配置跨域，导致架构复杂性增加。
- 多层跨域配置存在维护困难、偶尔出现跨域问题的可能性。

解决问题使用的简要方案:

- 将跨域处理集中到后端Express中，遵循"单一职责"原则，简化系统架构。
- 详细配置CORS选项，确保跨域机制在各种场景下的正确工作。

{ 2025-04-22 } 改动: 修复用户资料页JWT令牌验证失败及头像显示问题

主要改动文件:

1. - frontend
    |- src
      |- components
        |- UserProfileDialog.vue
          |- description: 用户资料对话框组件，修复了JWT令牌处理逻辑，解决了未登录用户无法查看其他用户资料的问题，同时简化了头像URL处理逻辑。
      |- utils
        |- api.js
          |- description: 修改了资源URL构建函数，添加了对"public/"前缀的处理，解决头像无法正确显示的问题。

2. - project_information
    |- bug_fixed_information
      |- user_profile_jwt_bug_fixed.md
        |- description: 新增的bug修复记录文件，详细记录了问题原因和解决方案。

主要改动逻辑:

- 在`fetchUserProfile`函数中，改进了令牌处理逻辑，只在有效令牌存在时才添加Authorization头
- 在`handleFieldUpdate`函数中，增加了令牌验证，未登录用户无法更新资料
- 在`handleAvatarUpload`函数中，同样只有在有效令牌存在时才添加Authorization头，并增加了未登录用户的提示
- 在`getResourceUrl`函数中，增加了对"public/"前缀的处理，确保从后端返回的头像URL能正确解析
- 简化了UserProfileDialog组件中的头像URL处理逻辑，将复杂处理逻辑移至统一的工具函数
- 创建了详细的bug修复记录，记录问题出现原因和解决策略

问题出现原因:

- 在UserProfileDialog组件中，不管用户是否登录都会添加Authorization头，当用户未登录时，会发送"Bearer undefined"
- 后端在接收请求时，当发现Authorization头存在却无效时，会尝试验证令牌并报"jwt malformed"错误
- 前端API服务的拦截器已经会自动添加令牌，但组件中又手动添加，导致可能的冲突
- 后端返回的头像URL包含"public/"前缀，但前端请求静态资源时不需要此前缀，导致头像无法正确显示

解决问题使用的简要方案:

- 改进前端组件中的令牌处理逻辑，只在有效令牌存在时才添加Authorization头
- 为更新用户资料的操作增加令牌验证，确保只有已登录用户才能更新资料
- 改进静态资源URL处理逻辑，自动处理"public/"前缀，确保正确显示头像
- 增加详细的日志输出，方便排查问题
- 添加更明确的错误提示，提升用户体验

{ 2024.7.12 } 改动: 修复Docker环境下登录后localStorage无法保存token的问题

主要改动文件:

1. - frontend
    |- src
      |- utils
        |- request.js
          |- description: 修改axios请求基础配置，将baseURL改为相对路径，确保在Docker环境下正常工作，并增强token获取逻辑。

      |- views
        |- login
          |- index.vue
            |- description: 修改登录处理函数，简化localStorage存储逻辑，确保token能成功保存。增强登录诊断功能。

      |- store
        |- index.js
          |- description: 改进状态管理store，修改token存储逻辑，以适应Docker环境。

      |- main.js
        |- description: 添加状态初始化逻辑，确保应用启动时能正确加载token信息。

主要改动逻辑:

- 修改了axios请求基础URL设置，从绝对路径改为相对路径，避免Docker环境中的跨域问题。
- 简化登录时的token存储流程，直接将token存入localStorage中，提高存储可靠性。
- 增强请求拦截器中的token获取逻辑，支持从多个位置获取token，提高token使用的灵活性。
- 增强登录诊断功能，帮助用户快速定位登录相关问题。
- 修改Vuex状态管理初始化逻辑，确保页面加载时能正确读取已有的token信息。

问题出现原因:

- Docker环境下前端使用绝对URL会导致跨域问题，影响token的存储和使用。
- 复杂的token存储逻辑可能在某些情况下失败，导致token无法正确保存。
- 前端token获取逻辑不够健壮，当主要获取方式失败时缺乏备选方案。

解决问题使用的简要方案:

- 调整前端的API请求URL策略，统一使用相对路径进行API请求，避免Docker环境中的跨域问题。
- 简化并强化token存储逻辑，确保token能够可靠地保存到localStorage中。
- 实现多级token获取逻辑，从多个位置尝试获取token，提高系统的容错能力。
- 添加完善的登录调试和诊断功能，方便后续快速定位和解决相关问题。

{ 2024.7.12 } 改动: 修复页面导航时自动登出的问题

主要改动文件:

1. - frontend
    |- src
      |- App.vue
        |- description: 改进了用户一致性检查函数ensureUserConsistency，增加token自动修复和同步。

      |- router
        |- index.js
          |- description: 优化了路由守卫中的登录状态判断，增加了双重检查机制，同时检查userInfo和accessToken。

      |- main.js
        |- description: 增强了token初始化逻辑，确保token在不同位置的一致性。

      |- utils
        |- request.js
          |- description: 修复了token刷新机制，确保token刷新后所有位置的token都会更新。

      |- views
        |- debug
          |- TokenDebug.vue
            |- description: 新增token调试页面，方便诊断和修复token问题。

主要改动逻辑:

- 优化了用户一致性检查函数，使其能检查并修复丢失的token信息
- 改进了路由守卫，同时检查userInfo和accessToken，避免误判登录状态
- 增强了token初始化逻辑，确保token从userInfo到localStorage和请求头的同步
- 修复了token刷新机制，确保刷新后所有位置的token都会更新
- 添加了token调试页面，提供可视化工具帮助诊断和修复token问题

问题出现原因:

- 登录状态检查机制不一致，路由守卫只检查userInfo但不检查token
- token在不同位置（localStorage、Vuex、请求头）之间可能不同步
- token刷新后未正确更新所有位置的token
- 用户信息一致性检查不完善，未能自动修复丢失的token

解决问题使用的简要方案:

- 重构ensureUserConsistency函数，增加token自动同步和修复功能
- 在路由守卫中增加双重检查和错误处理，防止误判登录状态
- 优化token初始化和刷新逻辑，确保token在各个位置保持一致
- 提供调试工具，便于问题诊断和修复

