# 后端项目结构说明文档

## 目录结构概览

```
backend/
├── node_modules/       # 依赖包目录
├── src/                # 源代码目录
│   ├── api/            # API模块
│   ├── config/         # 配置文件
│   ├── controllers/    # 控制器
│   ├── database/       # 数据库相关
│   ├── middleware/     # 中间件
│   ├── routes/         # 路由定义
│   ├── services/       # 业务服务层
│   ├── utils/          # 工具函数
│   ├── app.js          # 应用入口文件
│   └── db.js           # 数据库连接
├── public/             # 静态资源
├── uploads/            # 上传文件存储
├── logs/               # 日志文件
├── config/             # 全局配置
├── routes/             # 外部路由
├── .env                # 环境变量
├── package.json        # 项目依赖配置
└── yarn.lock           # 依赖版本锁定文件
```

## 核心文件依赖关系

### 应用入口依赖关系
- `src/app.js`: 应用程序入口，配置Express应用，引入中间件和路由
- `src/db.js`: 数据库连接文件，提供MySQL连接实例

### API和路由层
- `src/routes/`: 定义路由和HTTP方法处理
  - `routes/index.js`: 路由主入口，汇总各模块路由
  - `routes/auth.js`: 认证相关路由
  - `routes/problems.js`: 题目相关路由
  - `routes/submissions.js`: 提交相关路由
  - `routes/users.js`: 用户相关路由
- 路由依赖关系: routes/* ← controllers/* ← services/*

### 控制器层
- `src/controllers/`: 处理HTTP请求，调用服务层
  - `controllers/authController.js`: 认证控制器
  - `controllers/problemController.js`: 题目控制器
  - `controllers/submissionController.js`: 提交控制器
  - `controllers/userController.js`: 用户控制器
- 控制器依赖关系: services/* ← controllers/* ← routes/*

### 服务层
- `src/services/`: 实现业务逻辑，与数据库交互
  - `services/authService.js`: 认证服务
  - `services/problemService.js`: 题目服务
  - `services/submissionService.js`: 提交服务
  - `services/userService.js`: 用户服务
- 服务层依赖关系: database/* ← services/* ← controllers/*

### 数据库操作层
- `src/database/`: 数据库模型和查询
  - `database/models/`: 数据库模型定义
  - `database/queries/`: SQL查询封装
- 数据库依赖关系: db.js ← database/* ← services/*

### 中间件
- `src/middleware/`: 自定义中间件
  - `middleware/auth.js`: 认证中间件
  - `middleware/error.js`: 错误处理中间件
  - `middleware/validation.js`: 参数验证中间件
- 中间件依赖关系: middleware/* ← routes/*

### 工具函数和配置
- `src/utils/`: 工具函数
  - `utils/logger.js`: 日志记录
  - `utils/encryption.js`: 加密解密
  - `utils/judgeSystem.js`: 判题系统
- `src/config/`: 配置文件
  - `config/database.js`: 数据库配置
  - `config/app.js`: 应用配置
  - `config/auth.js`: 认证配置

## 关键业务流程

### 用户认证流程
1. 路由层接收请求: `routes/auth.js`
2. 控制器处理请求: `controllers/authController.js`
3. 调用服务层: `services/authService.js`
4. 服务层调用数据库查询: `database/queries/userQueries.js`
5. 生成JWT令牌并返回

### 题目提交和判题流程
1. 用户提交代码，请求进入路由: `routes/submissions.js`
2. 控制器处理提交: `controllers/submissionController.js`
3. 提交服务处理: `services/submissionService.js`
4. 调用判题系统: `utils/judgeSystem.js`
5. 更新提交状态并返回结果

### 数据库操作流程
1. 服务层调用数据库查询: `services/* → database/queries/*`
2. 执行SQL查询: `database/queries/* → db.js`
3. 返回结果给服务层，进行业务处理

## 技术栈与依赖
- Node.js 运行环境
- Express 服务器框架
- MySQL 数据库
- bcrypt 密码加密
- jsonwebtoken 用于JWT认证
- winston 日志记录
- multer 文件上传处理
- dotenv 环境变量管理

## 核心技术实现点
1. **RESTful API设计**: 遵循REST原则，提供清晰的API交互接口
2. **中间件机制**: 利用Express中间件实现认证、日志、错误处理等横切关注点
3. **MVC架构**: 控制器、服务、数据层分离，实现关注点分离
4. **OJ判题系统**: 实现代码执行、测试用例验证、性能分析等功能
5. **AI集成**: 与AI模型集成，提供代码审核、学习路径推荐等功能
6. **安全机制**: 实现密码加密、JWT认证、输入验证等安全措施
7. **日志系统**: 详细记录系统运行状态，方便调试和问题追踪
