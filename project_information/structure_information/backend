# 后端项目结构说明文档

## 目录结构概览

```
backend/
├── node_modules/       # 依赖包目录
├── src/                # 源代码目录
│   ├── api/            # API模块
│   │   ├── admin/      # 管理员相关API
│   │   ├── ai/         # AI功能相关API
│   │   ├── classroom/  # 课堂相关API
│   │   ├── community/  # 社区相关API
│   │   ├── judge/      # 判题系统API
│   │   ├── learning-paths/ # 学习路径API
│   │   ├── learning-plans/ # 学习计划API
│   │   ├── login/      # 登录认证API
│   │   ├── problems/   # 题目相关API
│   │   ├── stats/      # 统计相关API
│   │   ├── user/       # 用户相关API
│   │   └── index.js    # API路由汇总入口
│   ├── config/         # 配置文件
│   ├── controllers/    # 控制器
│   │   ├── auth.controller.js     # 认证控制器
│   │   └── problemPoolController.js # 题目池控制器
│   ├── database/       # 数据库相关
│   │   └── init.sql    # 数据库初始化SQL
│   ├── middleware/     # 中间件
│   │   ├── auth.js     # 认证中间件
│   │   └── auth.middleware.js # 认证辅助中间件
│   ├── routes/         # 路由定义
│   │   ├── auth.js     # 认证路由
│   │   ├── statistics.js # 统计路由
│   │   └── testCase.js # 测试用例路由
│   ├── services/       # 业务服务层
│   │   ├── judge/      # 判题服务
│   │   ├── problemPoolModel.js    # 题目池模型
│   │   ├── problemPoolService.js  # 题目池服务
│   │   └── testCase.js # 测试用例服务
│   ├── utils/          # 工具函数
│   │   ├── fileUpload.js # 文件上传工具
│   │   ├── generateHash.js # 哈希生成工具
│   │   ├── mysql.js    # MySQL工具
│   │   └── zhipuAI.js  # 智谱AI集成工具
│   ├── app.js          # 应用入口文件
│   └── db.js           # 数据库连接
├── public/             # 静态资源
├── uploads/            # 上传文件存储
├── logs/               # 日志文件
├── .env                # 环境变量
├── package.json        # 项目依赖配置
└── yarn.lock           # 依赖版本锁定文件
```

## Docker部署相关

### 容器配置
- 后端服务使用`aireview-backend`容器名
- 通过Docker卷挂载实现代码实时更新：
  - `./backend:/app` 将本地backend目录挂载到容器内的/app目录
  - `./backend/node_modules:/app/node_modules` 挂载模块目录

### 日志管理
- 支持通过API动态调整日志级别：`/api/log/level`和`/api/log/level/:level`
- 日志级别分为5个等级(0-4)：静默、错误、标准、调试、详细
- 使用`log-manager.sh`脚本管理日志级别

### 热重载开发
- 支持使用`mac-quick-reload.sh`脚本监控代码变更并自动重启服务
- 通过`npm run restart`命令支持容器内服务重启

## 核心文件依赖关系

### 应用入口依赖关系
- `src/app.js`: 应用程序入口，配置Express应用，引入中间件和路由
- `src/db.js`: 数据库连接文件，创建MySQL连接池实例

### API和路由层
- `src/api/`: 模块化的API路由实现
  - `api/index.js`: API路由主入口，汇总各模块路由
  - `api/login/`: 登录认证API
  - `api/problems/`: 题目相关API
  - `api/user/`: 用户相关API
  - `api/admin/`: 管理员相关API
  - `api/classroom/`: 课堂相关API
  - `api/ai/`: AI功能相关API
  - 等其他功能模块
- `src/routes/`: 独立的路由定义
  - `routes/auth.js`: 认证相关路由
  - `routes/statistics.js`: 统计相关路由
  - `routes/testCase.js`: 测试用例相关路由
- API依赖关系: api/各模块 ← controllers/控制器 ← services/服务

### 控制器层
- `src/controllers/`: 处理HTTP请求，调用服务层
  - `controllers/auth.controller.js`: 认证控制器
  - `controllers/problemPoolController.js`: 题目池控制器
- 控制器依赖关系: services/服务 ← controllers/控制器 ← api/路由

### 服务层
- `src/services/`: 实现业务逻辑，与数据库交互
  - `services/problemPoolModel.js`: 题目池数据模型
  - `services/problemPoolService.js`: 题目池服务
  - `services/testCase.js`: 测试用例服务
  - `services/judge/`: 判题服务
- 服务层依赖关系: utils/工具 + db.js ← services/服务 ← controllers/控制器

### 中间件
- `src/middleware/`: 自定义中间件
  - `middleware/auth.js`: 认证中间件
  - `middleware/auth.middleware.js`: 认证辅助中间件
- 中间件依赖关系: middleware/* ← app.js + routes/*

### 工具函数和配置
- `src/utils/`: 工具函数
  - `utils/fileUpload.js`: 文件上传工具
  - `utils/generateHash.js`: 哈希生成工具
  - `utils/mysql.js`: MySQL数据库操作工具
  - `utils/zhipuAI.js`: 智谱AI集成工具

## CORS和跨域配置
- 在`app.js`中配置CORS中间件，允许前端跨域访问API
- 支持通过Nginx反向代理解决生产环境跨域问题
- 开发环境下直接启用全局CORS支持

## 关键业务流程

### 用户认证流程
1. 路由层接收请求: `api/login/index.js` 或 `routes/auth.js`
2. 控制器处理请求: `controllers/auth.controller.js`
3. 使用中间件验证权限: `middleware/auth.js`
4. 查询数据库验证用户信息: `db.js`
5. 生成JWT令牌并返回

### 题目提交和判题流程
1. 用户提交代码，请求进入路由: `api/problems/index.js`
2. 控制器处理提交: `controllers/problemPoolController.js`
3. 服务层处理业务逻辑: `services/problemPoolService.js`
4. 调用判题系统: `services/judge/`
5. 使用测试用例评测: `services/testCase.js`
6. 更新提交状态并返回结果

### 数据库操作流程
1. 服务层调用数据库连接: `db.js`
2. 执行SQL查询: 使用连接池进行查询操作
3. 返回结果给服务层，进行业务处理
4. 返回处理后的数据到控制器和路由

### AI辅助功能流程
1. 路由层接收AI请求: `api/ai/index.js`
2. 调用智谱AI集成工具: `utils/zhipuAI.js`
3. 处理AI响应结果
4. 返回AI生成内容给前端

## 技术栈与依赖
- Node.js 运行环境
- Express 服务器框架
- MySQL 数据库 (使用mysql2/promise库)
- bcrypt 密码加密
- jsonwebtoken 用于JWT认证
- multer 文件上传处理
- dotenv 环境变量管理
- 智谱AI API集成

## 核心技术实现点
1. **基于Express的模块化API架构**: 将不同功能模块的API路由分离，提高代码组织和维护性
2. **MySQL连接池**: 使用连接池管理数据库连接，提高性能和可靠性
3. **JWT认证机制**: 实现基于Token的身份验证和授权
4. **文件上传处理**: 支持用户上传代码文件、图片等资源
5. **在线判题系统**: 实现代码执行、测试用例验证、性能分析等功能
6. **AI代码审核**: 集成智谱AI接口，提供代码审核、路径推荐等AI辅助功能
7. **安全机制**: 实现密码加密、输入验证等安全措施
8. **日志级别动态调整**: 支持运行时调整日志输出级别，便于调试和生产环境使用
