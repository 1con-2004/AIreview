# 前端项目结构说明文档

## 目录结构概览

```
frontend/
├── node_modules/       # 依赖包目录
├── public/             # 静态资源目录
├── src/                # 源代码目录
│   ├── api/            # API接口封装
│   ├── assets/         # 静态资源（图片、样式等）
│   ├── components/     # 公共组件
│   ├── router/         # 路由配置
│   ├── store/          # Vuex状态管理
│   ├── utils/          # 工具函数
│   ├── views/          # 页面视图组件
│   ├── App.vue         # 根组件
│   └── main.js         # 入口文件
├── .eslintrc.js        # ESLint配置
├── babel.config.js     # Babel配置
├── package.json        # 项目依赖配置
├── vue.config.js       # Vue项目配置
└── yarn.lock           # 依赖版本锁定文件
```

## 核心文件依赖关系

### 入口文件依赖关系
- `main.js`: 项目入口文件，引入并挂载根组件App.vue，配置Vue实例，引入Element Plus等UI库，配置全局设置
- `App.vue`: 根组件，包含整个应用的布局结构，引入router视图

### 路由管理
- `router/index.js`: 定义所有路由配置，引入views文件夹中的页面组件
- 路由依赖关系: views中的组件 ← router/index.js ← main.js

### 状态管理
- `store/index.js`: Vuex状态管理的主文件，引入各模块的store
- `store/modules/`: 包含各个功能模块的状态管理，如用户状态、题目状态等
- 状态管理依赖关系: store/modules/* ← store/index.js ← main.js

### API接口
- `api/index.js`: API接口的统一入口
- `api/modules/`: 包含各个功能模块的API请求封装，如用户API、题目API等
- API依赖关系: utils/request.js ← api/modules/* ← api/index.js ← 各组件

### 工具函数
- `utils/request.js`: 封装axios请求
- `utils/auth.js`: 处理用户认证相关的功能
- `utils/common.js`: 通用工具函数

### 组件依赖关系
1. **公共组件 (components/)**
   - `Navigation.vue`: 导航栏组件，被App.vue引用
   - `Footer.vue`: 页脚组件，被App.vue引用
   - 其他功能性组件: 被各个views中的页面组件引用

2. **页面组件 (views/)**
   - `Home.vue`: 首页
   - `Login.vue`: 登录页
   - `Register.vue`: 注册页
   - `problems/`: 题目相关页面
     - `ProblemList.vue`: 题目列表页
     - `ProblemDetail.vue`: 题目详情页
   - `user/`: 用户相关页面
     - `Profile.vue`: 用户资料页
     - `Dashboard.vue`: 用户仪表盘
   - `admin/`: 管理员相关页面

## 关键业务流程

### 用户认证流程
1. 用户在`views/Login.vue`输入账号密码
2. 调用`api/modules/user.js`中的登录API
3. 登录成功后，通过`utils/auth.js`存储token
4. 更新`store/modules/user.js`中的用户状态
5. 使用`router`跳转到首页或指定页面

### 题目展示与提交流程
1. 通过`views/problems/ProblemList.vue`展示题目列表
2. 点击题目后路由到`views/problems/ProblemDetail.vue`
3. 题目详情页通过`api/modules/problem.js`获取题目详细信息
4. 用户完成代码后，通过`api/modules/submission.js`提交答案
5. 展示提交结果和反馈

### 数据流转关系
- 页面UI组件 → API请求 → Vuex状态更新 → 组件重新渲染
- 用户操作 → 事件处理 → API请求 → 服务器处理 → 前端响应

## 技术栈与依赖
- Vue 3 框架核心
- Vue Router 用于路由管理
- Vuex 用于状态管理
- Element Plus UI组件库
- Axios 用于网络请求
- 其他辅助库: js-cookie, dayjs等

## 关键技术实现点
1. **响应式UI设计**：通过CSS媒体查询和Element Plus的响应式组件实现
2. **JWT认证机制**：结合utils/auth.js和API请求拦截器实现
3. **代码编辑器集成**：利用第三方编辑器组件实现在线代码编辑
4. **AI代码审核**：通过API请求调用后端AI服务进行代码分析
5. **数据可视化**：使用图表库实现多维度的数据分析展示
