# 前端项目结构说明文档

## 目录结构概览

```
frontend/
├── node_modules/       # 依赖包目录
├── public/             # 静态资源目录
├── src/                # 源代码目录
│   ├── api/            # API接口封装
│   ├── assets/         # 静态资源（图片、样式等）
│   ├── components/     # 公共组件
│   │   ├── common/     # 通用组件
│   │   ├── layout/     # 布局组件
│   │   ├── problem/    # 题目相关组件
│   │   ├── NavBar.vue  # 导航栏组件
│   │   └── UserProfileDialog.vue # 用户资料弹窗组件
│   ├── router/         # 路由配置
│   ├── store/          # Vuex状态管理
│   ├── utils/          # 工具函数
│   ├── views/          # 页面视图组件
│   │   ├── admin/      # 管理员相关页面
│   │   ├── ai/         # AI辅助功能页面
│   │   ├── classroom/  # 课堂相关页面
│   │   ├── community/  # 社区相关页面
│   │   ├── home/       # 首页相关组件
│   │   ├── learning-plans/ # 学习计划相关页面
│   │   ├── login/      # 登录注册相关页面
│   │   ├── problems/   # 题目相关页面
│   │   └── user/       # 用户相关页面
│   ├── App.vue         # 根组件
│   └── main.js         # 入口文件
├── .eslintrc.js        # ESLint配置
├── babel.config.js     # Babel配置
├── package.json        # 项目依赖配置
├── vue.config.js       # Vue项目配置
└── yarn.lock           # 依赖版本锁定文件
```

## 核心文件依赖关系

### 入口文件依赖关系
- `main.js`: 项目入口文件，引入并挂载根组件App.vue，配置Vue实例，引入相关UI库，配置全局设置
- `App.vue`: 根组件，包含整个应用的布局结构，仅包含router-view，实现基本的全局样式和用户登录状态管理

### 路由管理
- `router/index.js`: 定义所有路由配置，引入views文件夹中的页面组件
- 路由依赖关系: views中的组件 ← router/index.js ← main.js

### 状态管理
- `store/index.js`: Vuex状态管理的主文件，引入各模块的store
- `store/modules/`: 包含各个功能模块的状态管理，如用户状态、题目状态等
- 状态管理依赖关系: store/modules/* ← store/index.js ← main.js

### API接口
- `api/index.js`: API接口的统一入口
- `api/modules/`: 包含各个功能模块的API请求封装，如用户API、题目API等
- API依赖关系: utils/request.js ← api/modules/* ← api/index.js ← 各组件

### 工具函数
- `utils/request.js`: 封装axios请求
- `utils/auth.js`: 处理用户认证相关的功能
- `utils/common.js`: 通用工具函数

### 组件依赖关系
1. **公共组件 (components/)**
   - `NavBar.vue`: 导航栏组件，在各个页面中引用，负责全局导航
   - `UserProfileDialog.vue`: 用户资料弹窗组件，在NavBar中引用
   - `components/common/DeleteConfirmDialog.vue`: 删除确认弹窗组件
   - `components/layout/Header.vue`: 布局头部组件
   - `components/problem/`: 题目相关组件

2. **页面组件 (views/)**
   - `home/index.vue`: 首页
   - `login/`: 登录注册相关页面
   - `problems/`: 题目相关页面
   - `user/`: 用户相关页面
   - `admin/`: 管理员相关页面
   - `classroom/`: 课堂辅助相关页面
   - `ai/`: AI辅助功能相关页面
   - `community/`: 社区交流相关页面
   - `learning-plans/`: 学习计划相关页面

## 关键业务流程

### 用户认证流程
1. 用户在`views/login/index.vue`输入账号密码
2. 调用`api/modules/user.js`中的登录API
3. 登录成功后，将用户信息存储在localStorage，并更新全局状态
4. `App.vue`中的全局钩子监听登录状态变化，确保用户身份一致性
5. 使用`router`导航守卫控制页面访问权限，重定向到首页或指定页面

### 页面导航流程
1. 用户通过`NavBar.vue`中的导航链接选择功能模块
2. 导航链接调用`router-link`组件，触发路由变化
3. 路由变化触发`App.vue`中的导航守卫，检查用户权限
4. 根据用户权限和目标页面要求，允许访问或重定向到登录页

### 题目展示与提交流程
1. 通过`views/problems/`下的组件展示题目列表
2. 点击题目后路由到题目详情页
3. 题目详情页通过API获取题目详细信息
4. 用户完成代码后提交答案进行评测
5. 展示提交结果和反馈

### 数据流转关系
- 页面UI组件 → API请求 → Vuex状态更新 → 组件重新渲染
- 用户操作 → 事件处理 → API请求 → 服务器处理 → 前端响应

## 技术栈与依赖
- Vue 3 框架核心
- Vue Router 用于路由管理
- Vuex 用于状态管理
- PrimeVue UI组件库（根据App.vue样式引入可见）
- Axios 用于网络请求
- 其他辅助库: js-cookie, dayjs等

## 关键技术实现点
1. **响应式UI设计**：通过CSS变量和媒体查询实现
2. **用户身份一致性**：App.vue中实现全局用户身份校验和修复机制
3. **路由权限控制**：基于用户角色的路由访问控制
4. **代码编辑器集成**：利用第三方编辑器组件实现在线代码编辑
5. **AI代码审核**：通过API请求调用后端AI服务进行代码分析
6. **数据可视化**：使用图表库实现多维度的数据分析展示
