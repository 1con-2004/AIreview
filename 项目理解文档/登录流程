## 登录流程分析

### 技术栈和框架分析

**前端技术栈**：
- Vue 3 框架
- Vue Router 路由管理
- Vuex 状态管理
- Fetch API 进行网络请求
- Element Plus UI组件库

**后端技术栈**：
- Node.js + Express 服务器框架
- MySQL 数据库
- bcrypt 密码加密
- jsonwebtoken (JWT) 用于身份验证

### 登录流程分析

#### 1. 登录方式
系统支持两种登录方式：
- 账号密码登录
- 手机验证码登录

#### 2. 密码登录流程

1. **用户访问登录页面**：
   - 系统展示登录表单，包含用户名和密码输入框
   - 用户输入账号和密码，可选择"记住我"选项

2. **前端提交登录请求**：
   - 用户点击登录按钮后，前端发送POST请求至`http://localhost:3000/api/login`
   - 请求体包含用户名、密码和记住密码的状态

3. **后端验证**：
   - 后端根据用户名查询数据库，获取用户信息和角色
   - 检查用户状态，如果被封禁则返回错误
   - 使用bcrypt比对输入密码与数据库存储的哈希密码
   - 如果密码不匹配，返回"用户名或密码错误"的错误信息

4. **登录成功处理**：
   - 后端生成JWT令牌，有效期24小时
   - 返回成功响应，包含用户信息和token
   - 前端接收响应，将token和用户信息保存在localStorage中
   - 如选择"记住我"，还会保存密码

5. **获取用户资料**：
   - 登录成功后，前端使用token请求用户头像等其他资料
   - 将获取的头像URL添加到用户信息中

6. **跳转至首页**：
   - 显示登录成功消息，并使用Vue Router跳转到首页

#### 3. 手机验证码登录流程

1. **访问验证码登录页面**：
   - 点击"验证码登录"按钮跳转到手机验证码登录页面

2. **输入手机号并获取验证码**：
   - 验证手机号格式
   - 发送验证码并开始60秒倒计时

3. **提交验证码登录**：
   - 用户输入验证码后点击登录
   - 系统验证后生成token并返回用户信息

#### 4. 登录状态维护与路由保护

1. **前端状态管理**：
   - 使用Vuex存储用户信息，提供登录状态查询
   - 在localStorage保存token和用户信息

2. **路由守卫**：
   - 公开页面包括：`/login`, `/register`, `/home`, `/login/phone`, `/login/reset-password`
   - 访问需要登录的页面时，系统检查localStorage中是否有userInfo
   - 若无登录信息，则重定向到登录页面

3. **后端API保护**：
   - 使用authenticateToken中间件验证请求头中的Authorization token
   - 根据token解析出用户信息，添加到req.user
   - 不同角色（管理员、教师、学生）的权限控制

### 流程图

```mermaid
graph TD;
    A[用户访问登录页面] --> B[输入用户名和密码];
    B --> |点击登录| C[前端提交登录请求];
    C --> D[后端验证用户信息];
    D --> E{验证成功?};
    E -->|失败| F[返回错误信息];
    F --> B;
    E -->|成功| G[生成JWT Token];
    G --> H[返回用户信息和Token];
    H --> I[前端保存Token和用户信息];
    I --> J[获取用户头像等额外信息];
    J --> K[跳转到首页];
    
    A --> L[点击验证码登录];
    L --> M[输入手机号];
    M --> N[发送验证码];
    N --> O[输入验证码];
    O --> P[验证并登录];
    P --> G;
```

### 安全性考虑
1. 使用bcrypt进行密码加密，保证存储安全
2. JWT令牌用于会话管理，有效期24小时
3. 路由守卫和中间件确保只有登录用户可访问受保护资源
4. 接口返回统一的错误格式，不暴露内部错误详情

此登录系统实现了基本的账号安全功能，并通过前后端结合的方式进行了有效的用户身份认证和授权管理。
