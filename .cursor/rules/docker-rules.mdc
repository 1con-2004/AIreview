---
description: 
globs: 
alwaysApply: true
---
# Docker开发规范与配置

## 容器架构

项目采用多容器架构，主要包含以下容器：

- `aireview-nginx`: 基于nginx:alpine的Web服务器，提供前端静态资源服务和API反向代理
- `aireview-backend`: 基于Node.js的后端服务，运行在3000端口
- `aireview-db`: 基于MySQL 8.0的数据库服务，运行在3306端口（映射到宿主机3307端口）

## 网络配置

- 所有容器加入名为`aireview_network`的桥接网络
- 容器间通过容器名称进行通信
- 端口映射：
  - Nginx: 80:80
  - 后端: 3000:3000（内部）
  - MySQL: 3307:3306（宿主机:容器）

## 卷挂载策略

### Nginx卷挂载
```yaml
volumes:
  - ./nginx/default.conf:/etc/nginx/conf.d/default.conf
  - ./frontend/dist:/usr/share/nginx/html
  - ./frontend/public/icons:/usr/share/nginx/html/icons:rw
  - ./uploads:/usr/share/nginx/html/uploads:rw
  - ./uploads/avatars:/usr/share/nginx/html/uploads/avatars:rw
```

### 后端卷挂载
```yaml
volumes:
  - ./backend:/app:rw
  - backend_modules:/app/node_modules
  - ./backend/logs:/app/logs
  - /var/run/docker.sock:/var/run/docker.sock
  - ./uploads:/app/public/uploads
```

### 数据库卷挂载
```yaml
volumes:
  - db_data:/var/lib/mysql
  - ./db/init:/docker-entrypoint-initdb.d
```

## 环境变量配置

### 后端环境变量
```yaml
environment:
  - NODE_ENV=development
  - DB_HOST=db
  - DB_PORT=3306
  - DB_USER=root
  - DB_PASSWORD=root
  - DB_NAME=AIreview
  - DOCKER_HOST=unix:///var/run/docker.sock
  - JUDGE_NETWORK=aireview_network
  - CHOKIDAR_USEPOLLING=true
  - LOG_LEVEL=3
  - DEEPSEEK_API_KEY=${DEEPSEEK_API_KEY}
  - ZHIPUAI_API_KEY=${ZHIPUAI_API_KEY}
  - REDIS_HOST=redis
  - REDIS_PORT=6379
  - JWT_SECRET=your_jwt_secret
  - JWT_EXPIRE=86400
```

### 数据库环境变量
```yaml
environment:
  - MYSQL_ROOT_PASSWORD=root
  - MYSQL_DATABASE=AIreview
  - MYSQL_USER=aireview
  - MYSQL_PASSWORD=aireview
```

## Nginx配置规范

### 基础配置
- 启用gzip压缩
- 配置MIME类型
- 设置健康检查接口
- 配置SSL（如需HTTPS）
- 设置安全响应头

### 静态资源处理
- 配置静态资源缓存策略（30天）
- 支持跨域请求
- 处理前端路由
- 配置资源压缩

### API代理配置
- 代理到后端服务
- 配置WebSocket支持
- 设置超时时间（300s）
- 处理跨域请求
- 配置请求缓冲区

### 上传文件处理
- 配置上传文件目录访问
- 设置7天缓存
- 支持跨域访问
- 限制文件大小

## 健康检查配置

### Nginx健康检查
```yaml
healthcheck:
  test: ["CMD", "wget", "--spider", "-q", "http://localhost/health"]
  interval: 30s
  timeout: 10s
  retries: 3
  start_period: 10s
```

### 后端健康检查
```yaml
healthcheck:
  test: ["CMD", "node", "-e", "require('http').get('http://localhost:3000/api/health', res => (res.statusCode === 200 ? process.exit(0) : process.exit(1)))"]
  interval: 30s
  timeout: 10s
  retries: 3
  start_period: 15s
```

### 数据库健康检查
```yaml
healthcheck:
  test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "root", "-proot"]
  interval: 30s
  timeout: 30s
  retries: 5
  start_period: 60s
```

## 容器依赖关系

```yaml
depends_on:
  db:
    condition: service_healthy
  redis:
    condition: service_healthy
```

使用健康检查条件确保依赖服务已完全启动且健康。

## 资源限制

```yaml
deploy:
  resources:
    limits:
      cpus: '1.0'
      memory: 1G
    reservations:
      cpus: '0.25'
      memory: 512M
```

为容器设置适当的资源限制，防止单个容器占用过多资源。

## 最佳实践

1. **开发环境配置**
   - 使用`docker-compose up -d`启动所有服务
   - 使用`docker-compose logs -f`查看实时日志
   - 使用`docker-compose down`停止服务
   - 使用`docker-compose up -d --build <service>`重建特定服务

2. **数据库管理**
   - 数据库初始化脚本放在`./db/init`目录
   - 按顺序命名初始化脚本（如01-schema.sql，02-data.sql）
   - 使用`docker-compose exec db mysql -u root -p`连接数据库
   - 定期备份数据库数据

3. **文件上传管理**
   - 上传文件存储在`./uploads`目录
   - 头像文件存储在`./uploads/avatars`目录
   - 确保目录权限正确（chmod -R 777 uploads）
   - 使用sync-avatars.sh同步多实例间头像

4. **日志管理**
   - 后端日志存储在`./backend/logs`目录
   - 使用`docker-compose logs -f backend`查看后端日志
   - 使用log-manager.sh管理日志级别
   - 定期清理或归档旧日志文件

5. **性能优化**
   - 启用gzip压缩
   - 配置适当的缓存策略
   - 优化静态资源加载
   - 使用Redis缓存频繁访问的数据
   - 优化数据库查询

6. **安全配置**
   - 使用环境变量管理敏感信息
   - 配置适当的跨域策略
   - 定期更新容器镜像
   - 限制容器权限
   - 使用非root用户运行容器

7. **故障排除**
   - 检查容器健康状态
   - 查看容器日志
   - 验证网络连接
   - 检查卷挂载状态
   - 确认环境变量设置

8. **多环境部署**
   - 使用.env文件区分开发/测试/生产环境
   - 为不同环境创建不同的docker-compose配置
   - 根据环境调整资源限制和网络设置
   - 使用环境特定的健康检查策略

9. **容器更新策略**
   - 使用镜像标签明确版本
   - 实施蓝绿部署或滚动更新
   - 备份数据和配置文件
   - 设置合适的重启策略
   - 使用版本化的环境变量
10. **网络安全**
    - 仅暴露必要端口
    - 使用内部网络进行容器间通信
    - 配置防火墙规则
    - 实施访问控制
    - 避免在公共网络暴露管理接口 
