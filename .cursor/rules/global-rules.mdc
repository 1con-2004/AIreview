---
description: 
globs: 
alwaysApply: true
---
# 全局规则指南

## 回答偏好
1. 每次回答问题前，需添加提示语："你好，艾垦："，表明已参考本规则。

2. 在使用项目理解帮助文档后，回答问题时需加上提示语："经过我分析了项目理解帮助文件后:"。

3. 回答问题时需要优先参考以下文件：
   - [project_index.md](mdc:project_information/project_index.md) 项目总体索引
   - [frontend](mdc:project_information/structure_information/frontend) - 前端结构说明
   - [backend](mdc:project_information/structure_information/backend) - 后端结构说明
   - [backend_api.md](mdc:project_information/api_information/backend_api.md) - 后端API文档
   - [frontend_api.md](mdc:project_information/api_information/frontend_api.md) - 前端API文档

## 代码编写偏好

### 全局代码规范
1. **代码注释要求**：
   - 必须添加中文注释
   - 注释应位于代码行上方或紧邻处
   - 注释需清晰描述功能、作用及关键逻辑点
   - 使用特殊提示词便于后期定位

2. **代码结构要求**：
   - 遵循模块化设计
   - 控制单文件代码行数（建议不超过300行）
   - 避免代码重复
   - 保持代码整洁有序

3. **环境区分**：
   - 明确区分开发环境（dev）
   - 测试环境（test）
   - 生产环境（prod）

### 前端编写偏好
1. **响应式设计**：
   - 避免使用固定像素
   - 使用相对单位（rem、em、%等）
   - 确保多设备适配性
   - 兼容主流浏览器

2. **UI设计风格**：
   - 参考Cursor官网设计
   - 参考Apple官网设计
   - 保持简洁美观
   - 注重用户体验

3. **组件开发规范**：
   - 组件化开发
   - 合理使用Vue 3特性
   - 遵循单一职责原则
   - 注重组件复用性

### 后端编写偏好
1. **日志记录**：
   - 编写详细调试日志
   - 记录关键操作信息
   - 记录错误信息
   - 记录程序执行流程

2. **API开发规范**：
   - 遵循RESTful设计
   - 使用curl工具测试
   - 确保接口稳定性
   - 提供完整文档

3. **数据库操作**：
   - 优化查询性能
   - 注意数据安全
   - 合理使用事务
   - 做好数据备份

## 项目结构同步要求

### 结构变更通知
当项目结构发生变更时，需要同步更新以下文件：

1. **项目索引文件**：
   - 更新 [project_index.md](mdc:project_information/project_index.md)
   - 确保目录结构准确
   - 更新关键文件说明
   - 更新配置说明

2. **结构说明文件**：
   - 更新 [frontend](mdc:project_information/structure_information/frontend)
   - 更新 [backend](mdc:project_information/structure_information/backend)
   - 更新文件依赖关系
   - 更新模块说明

3. **API文档**：
   - 更新 [backend_api.md](mdc:project_information/api_information/backend_api.md)
   - 更新 [frontend_api.md](mdc:project_information/api_information/frontend_api.md)
   - 更新接口变更
   - 更新参数说明

### 同步检查清单
1. **目录结构检查**：
   - 确认新增/删除的目录已更新
   - 确认目录层级关系正确
   - 确认目录命名规范
   - 确认目录用途说明完整

2. **文件依赖检查**：
   - 确认新增/删除的依赖已更新
   - 确认依赖关系图正确
   - 确认模块间关系清晰
   - 确认循环依赖已处理

3. **API文档检查**：
   - 确认新增/删除的API已更新
   - 确认API参数说明完整
   - 确认API返回值说明准确
   - 确认API示例代码正确

4. **配置文件检查**：
   - 确认环境配置更新
   - 确认依赖版本更新
   - 确认构建配置更新
   - 确认部署配置更新

## Docker与Nginx配置同步要求

### Docker配置同步
1. **容器配置更新**：
   - 检查是否需要新增容器服务
   - 更新容器间的依赖关系
   - 确认容器资源配置合理性
   - 更新容器健康检查配置

2. **网络配置同步**：
   - 更新端口映射关系
   - 检查网络连接配置
   - 确认容器间通信正常
   - 更新防火墙规则

3. **卷挂载同步**：
   - 更新文件挂载路径
   - 检查目录权限设置
   - 确认数据持久化配置
   - 更新备份策略
   
4. **环境变量同步**：
   - 更新环境变量配置
   - 检查敏感信息处理
   - 确认多环境配置正确
   - 更新配置文件模板

### Nginx配置同步
1. **基础配置更新**：
   - 更新gzip压缩配置
   - 检查MIME类型设置
   - 更新健康检查接口
   - 确认SSL证书配置

2. **静态资源处理**：
   - 更新缓存策略配置
   - 检查跨域请求设置
   - 更新资源路由规则
   - 确认资源压缩策略

3. **API代理配置**：
   - 更新后端服务代理
   - 检查WebSocket支持
   - 更新超时时间设置

4. **安全配置同步**：
   - 更新访问控制规则
   - 检查SSL/TLS配置
   - 更新安全头部设置
   - 确认防护措施有效

### 配置检查清单
1. **Docker Compose检查**：
   - 确认[docker-compose.yml](mdc:docker-compose.yml)更新
   - 检查服务依赖关系
   - 验证环境变量配置
   - 测试容器启动流程

2. **Nginx配置检查**：
   - 确认 [default.conf](mdc:nginx/default.conf) 更新
   - 检查站点配置文件
   - 验证反向代理规则
   - 测试配置有效性

3. **性能优化检查**：
   - 确认资源限制合理
   - 检查缓存策略有效
   - 验证负载均衡配置
   - 测试性能指标达标


4. **安全性检查**：
   - 确认权限设置正确
   - 检查敏感信息保护
   - 验证访问控制有效
   - 测试安全防护措施

### 部署流程同步
1. **配置文件更新**：
   - 更新开发环境配置
   - 更新测试环境配置
   - 更新生产环境配置
   - 确保配置文件同步

2. **部署脚本更新**：
   - 更新构建脚本
   - 更新部署脚本
   - 更新回滚脚本
   - 确保脚本可用性

3. **监控告警更新**：
   - 更新监控指标
   - 更新告警规则
   - 更新响应策略
   - 确保监控有效性


